=== PROJECT FILE STRUCTURE ===
  |  |-build.gradle
  |  |-deploy_daemon.sh
  |  |-Dockerfile
  |  |  |  |-gradle-wrapper.jar
  |  |  |  |-gradle-wrapper.properties
  |  |-gradlew
  |  |-gradlew.bat
  |  |-README.md
  |  |-settings.gradle
  |  |  |  |  |  |  |  |  |  |-AmazonDaemon.java
  |  |  |  |  |  |  |  |  |  |-DaemonThread.java
  |  |  |  |  |  |  |  |  |  |-Destination.java
  |  |  |  |  |  |  |  |  |  |  |-onPurchaseListener.java
  |  |  |  |  |  |  |  |  |  |-MockUPS.java
  |  |  |  |  |  |  |  |  |  |-Package.java
  |  |  |  |  |  |  |  |  |  |  |-AmazonUPSProtocol.java
  |  |  |  |  |  |  |  |  |  |  |-ups_amazon.proto
  |  |  |  |  |  |  |  |  |  |  |-world_amazon.proto
  |  |  |  |  |  |  |  |  |  |  |-world_ups.proto
  |  |  |  |  |  |  |  |  |  |  |-WorldAmazonProtocol.java
  |  |  |  |  |  |  |  |  |  |  |-WorldUPSProtocol.java
  |  |  |  |  |  |  |  |  |  |-Request.java
  |  |  |  |  |  |  |  |  |  |-Server.java
  |  |  |  |  |  |  |  |  |  |-SQL.java
  |  |  |  |  |  |  |  |  |  |-Utils.java
  |-dangerlog.md
  |-differentiation.pdf
  |-docker-compose.yml
  |  |  |-web-app.conf
  |-output.txt
  |-print_all.sh
  |-README.md
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-admin.cpython-38.pyc
  |  |  |  |-apps.cpython-38.pyc
  |  |  |  |-models.cpython-38.pyc
  |  |  |  |-urls.cpython-38.pyc
  |  |  |  |-utils.cpython-38.pyc
  |  |  |  |-views.cpython-38.pyc
  |  |  |-admin.py
  |  |  |-apps.py
  |  |  |  |-__init__.py
  |  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |  |-0001_initial.cpython-38.pyc
  |  |  |  |-0001_initial.py
  |  |  |-models.py
  |  |  |  |  |-main.css
  |  |  |  |  |-apple.jpg
  |  |  |  |  |-fried_chicken.jpg
  |  |  |  |  |-ipad_mini.jpg
  |  |  |  |  |-ipad_pro.jpg
  |  |  |  |  |-ipad.jpg
  |  |  |  |  |-magic_keyboard.jpg
  |  |  |  |  |-orange.jpg
  |  |  |  |  |-sample.jpg
  |  |  |  |  |-jquery-3.5.0.min.js
  |  |  |  |  |-jquery.tablesorter.js
  |  |  |  |  |-base.html
  |  |  |  |  |-checkout.html
  |  |  |  |  |-home.html
  |  |  |  |  |-item_add_update.html
  |  |  |  |  |-item_detail.html
  |  |  |  |  |-item_management.html
  |  |  |  |  |-list_package_detail.html
  |  |  |  |  |-list_package.html
  |  |  |  |  |-shopping_cart.html
  |  |  |  |  |-success.html
  |  |  |-tests.py
  |  |  |-urls.py
  |  |  |-utils.py
  |  |  |-views.py
  |  |-Dockerfile
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-settings.cpython-38.pyc
  |  |  |  |-urls.cpython-38.pyc
  |  |  |  |-wsgi.cpython-38.pyc
  |  |  |-asgi.py
  |  |  |-settings.py
  |  |  |-urls.py
  |  |  |-wsgi.py
  |  |-initserver.sh
  |  |-manage.py
  |  |-requirements.txt
  |  |-runserver.sh
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-admin.cpython-38.pyc
  |  |  |  |-apps.cpython-38.pyc
  |  |  |  |-forms.cpython-38.pyc
  |  |  |  |-models.cpython-38.pyc
  |  |  |  |-signals.cpython-38.pyc
  |  |  |  |-urls.cpython-38.pyc
  |  |  |  |-utils.cpython-38.pyc
  |  |  |  |-views.cpython-38.pyc
  |  |  |-admin.py
  |  |  |-apps.py
  |  |  |-forms.py
  |  |  |  |-__init__.py
  |  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |  |-0001_initial.cpython-38.pyc
  |  |  |  |-0001_initial.py
  |  |  |-models.py
  |  |  |-signals.py
  |  |  |  |  |-login.html
  |  |  |  |  |-logout.html
  |  |  |  |  |-profile.html
  |  |  |  |  |-register.html
  |  |  |-tests.py
  |  |  |-urls.py
  |  |  |-utils.py
  |  |  |-views.py
  |  |-wait-for-it.sh
  |  |  |-Dockerfile
  |  |  |-server
  |  |  |-wait-for-it.sh
  |  |-docker-compose.yml
  |  |-README.md


./
./web-app/
./web-app/amazon/
./web-app/amazon/migrations/

--- File: ./web-app/amazon/migrations/__init__.py ---
./web-app/amazon/migrations/__pycache__/

--- File: ./web-app/amazon/migrations/0001_initial.py ---
# Generated by Django 3.1.8 on 2025-04-24 20:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('price', models.FloatField(default=0.99)),
                ('img', models.CharField(default='/static/img/sample.jpg', max_length=50)),
                ('on_sell', models.BooleanField(default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='amazon.category')),
                ('seller', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WareHouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.IntegerField(default=1)),
                ('y', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warehouse', models.IntegerField(default=1)),
                ('status', models.CharField(default='processing', max_length=100)),
                ('dest_x', models.IntegerField(default=10)),
                ('dest_y', models.IntegerField(default=10)),
                ('creation_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('ups_name', models.CharField(blank=True, default='', max_length=50)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_cnt', models.IntegerField(default=1)),
                ('item_price', models.FloatField(default=0.99)),
                ('creation_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='amazon.item')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='amazon.package')),
            ],
        ),
    ]

--- File: ./web-app/amazon/models.py ---
from django.contrib.auth.models import User
from django.db import models
from django.utils.timezone import now

# Create your models here.

"""
README
use real amazon as reference
Item stands for the actual item we are selling.
Order stands for an order, contains an item and count.
Package stands for one pack, contains delivery-related information and list of orders.
1. Every time use click "add to cart" or "place order", we will create a new order
(NOTE: this action should happen in the item detail page)
    1.1 if user click "add to cart", we will leave the package field of order NULL
    1.2 if user click "place order", we will create a new package, and add this order into package
2. To fetch the shop car of one user ---> user.orders.filter(package__isnull=True)
3. To fetch all historical packages of one user ---> user.packages
"""


# warehouse class, used to initial a list of ware house
class WareHouse(models.Model):
    x = models.IntegerField(default=1)
    y = models.IntegerField(default=1)

    def __str__(self):
        return "<" + str(self.x) + ", " + str(self.y) + ">"


# The category of different items.
class Category(models.Model):
    category = models.CharField(max_length=50, blank=False, null=False)

    def __str__(self):
        return self.category


# This is the class which represent one specific item.
class Item(models.Model):
    description = models.CharField(max_length=100, blank=False, null=False)
    # below are some values we might want for advance feature(we can add more)
    price = models.FloatField(default=0.99, blank=False, null=False)
    img = models.CharField(max_length=50, default="/static/img/sample.jpg")
    # even we delete the seller or category info, we should still keep the item info
    # since there will be some history order referring to it
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    seller = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    on_sell = models.BooleanField(default=True)

    def __str__(self):
        return self.description


# This stands for a package(stands for one purchase).
# each package can contains several orders(e.g. package.orders.all())
class Package(models.Model):
    # user info
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="packages")
    # the warehouse id where this package stores
    warehouse = models.IntegerField(default=1)
    # the status of current package, possible value:
    # processing --- purchase but not receive the successful message
    # processed  --- purchase successful
    # packing    --- package arrived warehouse and is packing
    # packed     --- package is packed
    # loading    --- the truck arrived at warehouse and is loading
    # loaded     --- finish loading
    # delivering --- delivering to destination
    # delivered  --- delivered(final state of this package)
    # error      --- any error state(should follow by the actual error message, e.g. error: illegal item)
    status = models.CharField(max_length=100, default="processing")
    dest_x = models.IntegerField(default=10)
    dest_y = models.IntegerField(default=10)
    creation_time = models.DateTimeField(default=now)
    # associate ups account name for this package(optional)
    ups_name = models.CharField(max_length=50, default="", blank=True)

    def total(self):
        total = 0
        for order in self.orders.all():
            total += order.total()
        return total

    # NOTE: this value will not change according the item price(aka it's fixed)
    def total_fixed(self):
        total = 0
        for order in self.orders.all():
            total += order.total_fixed()
        return total

    def info_str(self):
        info = "Your order has successfully been placed.\nDetail info:\n"
        for order in self.orders.all():
            info += "* %d %s(total $ %.2f)\n" % (order.item_cnt, order.item.description, order.total_fixed())
        info += "total: $%.2f" % (self.total_fixed())
        return info

    def __str__(self):
        return "<" + str(self.warehouse) + ", " + self.status + ">"


# order = item id + item counts (+ item price)
class Order(models.Model):
    # user info
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
    item = models.ForeignKey(Item, on_delete=models.SET_NULL, null=True)
    item_cnt = models.IntegerField(default=1)
    # since seller can change the price, but the price of any finished order can't be change
    # so we need to store the price info of any finished order
    item_price = models.FloatField(default=0.99)
    # package id
    package = models.ForeignKey(Package, on_delete=models.CASCADE, related_name="orders", null=True, blank=True)
    creation_time = models.DateTimeField(default=now)

    # return the total price for current order
    def total(self):
        return self.item_cnt * self.item.price

    # return the total price for current order
    # NOTE: this value will not change according the item price(aka it's fixed)
    def total_fixed(self):
        return self.item_cnt * self.item_price

    def __str__(self):
        return "<" + str(self.package_id) + ", <" + str(self.item_id) + ', ' + str(self.item_cnt) + ">>"


--- File: ./web-app/amazon/__init__.py ---
./web-app/amazon/__pycache__/

--- File: ./web-app/amazon/apps.py ---
from django.apps import AppConfig
from django.db.models.signals import post_migrate


# This function will check whether there are default users, and will create two if not.
def default_users():
    from django.contrib.auth.models import User
    try:
        User.objects.get(username="mini_amazon")
    except User.DoesNotExist:
        mini_amazon = User.objects.create(
            username="mini_amazon",
            email="miniamazon@noreply.com",
            is_superuser=False
        )
        mini_amazon.set_password("amazon12345")
        mini_amazon.profile.is_seller = True
        mini_amazon.save()
    try:
        User.objects.get(username="xkw")
    except User.DoesNotExist:
        xkw = User.objects.create(
            username="xkw",
            email="xkw@noreply.com",
            is_superuser=False
        )
        xkw.set_password("xkw12345")
        xkw.profile.is_seller = True
        xkw.save()


# This function will check whether there are default category of products, and will create if not.
def default_category():
    from amazon.models import Category
    if Category.objects.all().count() == 0:
        Category.objects.create(category="fruit")
        Category.objects.create(category="food")
        Category.objects.create(category="electronic")


# This function will check whether there are default products, and will create if not.
def default_items():
    from django.contrib.auth.models import User
    from amazon.models import Item, Category
    if Item.objects.all().count() == 0:
        # at the first time, we should insert some default data
        amazon = User.objects.get(username="mini_amazon")
        xkw = User.objects.get(username="xkw")
        fruit = Category.objects.get(category="fruit")
        food = Category.objects.get(category="food")
        electronic = Category.objects.get(category="electronic")
        Item.objects.create(
            description="apple", price=1.99,
            img="/static/img/apple.jpg", category=fruit,
            seller=xkw
        )
        Item.objects.create(
            description="orange", price=0.99,
            img="/static/img/orange.jpg", category=fruit,
            seller=xkw
        )
        Item.objects.create(
            description="Fried Chicken", price=5.99,
            img="/static/img/fried_chicken.jpg", category=food,
            seller=xkw
        )
        Item.objects.create(
            description="iPad Mini", price=399.99,
            img="/static/img/ipad_mini.jpg", category=electronic,
            seller=amazon
        )
        Item.objects.create(
            description="iPad", price=429.99,
            img="/static/img/ipad.jpg", category=electronic,
            seller=amazon
        )
        Item.objects.create(
            description="iPad Pro", price=1099.99,
            img="/static/img/ipad_pro.jpg", category=electronic,
            seller=amazon
        )
        Item.objects.create(
            description="Magic Keyboard", price=129.99,
            img="/static/img/magic_keyboard.jpg", category=electronic,
            seller=amazon
        )


def default_warehouse():
    from amazon.models import WareHouse
    # create 10 warehouse
    for x, y in zip(range(10, 110, 10), range(10, 110, 10)):
        WareHouse.objects.create(x=x, y=y)


def migrate_callback(sender, **kwargs):
    default_users()
    default_category()
    default_items()
    default_warehouse()


class AmazonConfig(AppConfig):
    name = 'amazon'

    def ready(self):
        post_migrate.connect(migrate_callback, sender=self)

--- File: ./web-app/amazon/admin.py ---
from django.contrib import admin
from .models import Package, Order, Item

# Register your models here.
admin.site.register(Item)
admin.site.register(Package)
admin.site.register(Order)
--- File: ./web-app/amazon/utils.py ---
import socket
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from PIL import Image
from amazon.models import WareHouse
from concurrent.futures import ThreadPoolExecutor
import math

# email address info
SMTP_SERVER = 'smtp.gmail.com:587'
USER_ACCOUNT = {
    'username': 'ece568noreply@gmail.com',
    'password': 'ece568code'
}
pool = ThreadPoolExecutor(10)


def send_email_async(receivers, text):
    pool.submit(send_email, receivers, text)


def send_email(receivers, text):
    msg_root = MIMEMultipart()
    msg_root['Subject'] = "Info from Mini Amazon 568"
    msg_root['To'] = ", ".join(receivers)
    msg_text = MIMEText(text)
    msg_root.attach(msg_text)

    smtp = smtplib.SMTP(SMTP_SERVER)
    smtp.starttls()
    smtp.login(USER_ACCOUNT["username"], USER_ACCOUNT["password"])
    smtp.sendmail(USER_ACCOUNT["username"], receivers, msg_root.as_string())
    smtp.quit()


def save_img(name, data):
    img = Image.open(data)
    img.save("/code/amazon/static/img/%s" % (name), "JPEG", optimize=1)


# calculate the nearest warehouse for the location
def cal_warehouse(x, y):
    whs = WareHouse.objects.all()
    min_id = 1
    min_dest = 65535
    for wh in whs:
        dest = math.sqrt(math.pow(wh.x - x, 2) + math.pow(wh.y - y, 2))
        if dest < min_dest:
            min_dest = dest
            min_id = wh.id
    return min_id


# Tell the daemon to purchase something, which specify by the package id.
# front-end should first store the package into DB and then notify the daemon by sending the id.
def purchase(package_id):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # use port 8888 to communicate with daemon
    client.connect(('daemon', 8888))
    # NOTE: append a \n at the end to become a line
    msg = str(package_id) + '\n'
    client.send(msg.encode('utf-8'))
    # expected response: ack:<package_id>
    data = client.recv(1024)
    data = data.decode()
    res = data.split(":")
    if res[0] == "ack" and res[1] == str(package_id):
        return True
    print('recv:', data)
    return False


if __name__ == '__main__':
    send_email_async(["xiakewei96@gmail.com"], "hello")
./web-app/amazon/static/
./web-app/amazon/static/amazon/
./web-app/amazon/static/js/
./web-app/amazon/static/img/
./web-app/amazon/templates/
./web-app/amazon/templates/amazon/

--- File: ./web-app/amazon/tests.py ---
from django.test import TestCase

# Create your tests here.

--- File: ./web-app/amazon/urls.py ---
from django.urls import path

from . import views

urlpatterns = [
    # home page(list items)
    path('', views.home, name="home"),
    # category in home page
    path('category/<category>', views.home_category, name="home_category"),

    path('seller/<int:seller_id>', views.home_seller, name="home_seller"),
    # item detail page
    path('item/<int:item_id>', views.item_detail, name="item_detail"),
    # checkout page
    path('checkout/<int:package_id>', views.checkout, name="checkout"),
    # shopping cart page
    path('shopcart', views.shop_cart, name="shop_cart"),
    # add new item page
    path('add_update_item/<item_id>', views.add_update_item, name="add_update_item"),
    # item management page for seller
    path('item_management', views.item_management, name="item_management"),

    # api for change cnt in shopping cart
    path('change_cnt', views.change_cnt, name="change_cnt"),
    # api for check whether an item is already exist
    path('check_item', views.check_item, name="check_item"),
    # api for delete item
    path('delete_item', views.delete_item, name="delete_item"),

    # list_package page
    path('listpackage/', views.list_package, name='list-package'),
    # list_package_detail page
    path('listpackage/<int:package_id>/', views.list_package_detail, name='list-package-detail'),
    # list_package_detail page
    path('deletepackage/<int:package_id>', views.delete_package, name='delete-package'),
]

--- File: ./web-app/amazon/views.py ---
from django.shortcuts import render, redirect
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, Http404
from amazon.utils import *

from .models import *
from .utils import purchase


# Home page, used to show a list of items.
def home(request):
    context = {}
    items = Item.objects.all().filter(on_sell=True).order_by("id")
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context["items"] = items
    context["categories"] = Category.objects.all()
    context["category"] = "All"
    return render(request, "amazon/home.html", context)


# Home page, but with specific category
def home_category(request, category):
    category = Category.objects.get(category=category)
    items = Item.objects.filter(category=category).order_by("id").all()
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context = {
        "items": items,
        "categories": Category.objects.all(),
        "category": category
    }
    return render(request, "amazon/home.html", context)


def home_seller(request, seller_id):
    seller = User.objects.get(pk=seller_id)
    items = Item.objects.filter(seller=seller).order_by("id").all()
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context = {
        "items": items,
        "seller_name": seller.username
    }
    return render(request, "amazon/home.html", context)


# Item detail page, used to show the detail info of one specific item.
def item_detail(request, item_id):
    item = Item.objects.get(pk=item_id)
    context = {}
    if request.method == "POST":
        if not request.user.is_authenticated:
            return redirect(reverse("login"))
        cnt = int(request.POST["count"])
        if request.POST["action"] == "buy":
            # create a new package
            package = Package(owner=request.user)
            package.save()
            package.orders.create(
                owner=request.user,
                item=item,
                item_cnt=cnt
            )
            return redirect(reverse("checkout", kwargs={'package_id': package.id}))
        else:
            try:
                # try to get an existing order
                exist_order = Order.objects.get(owner=request.user, item=item, package__isnull=True)
                exist_order.item_cnt += cnt
                exist_order.save()
            except Order.DoesNotExist:
                # create a new order
                order = Order(owner=request.user, item=item, item_cnt=cnt)
                order.save()
            context["info"] = "Successfully add to cart."
            context["is_add_cart"] = True
            return render(request, "amazon/success.html", context)
    else:
        context["item"] = item
        return render(request, "amazon/item_detail.html", context)


@login_required
def checkout(request, package_id):
    package = Package.objects.get(pk=package_id)
    context = {}
    # actually checkout
    if request.method == "POST":
        x = int(request.POST["x"])
        y = int(request.POST["y"])
        ups_name = ""
        if "ups_name" in request.POST.keys():
            ups_name = request.POST["ups_name"]
        # save the value into profile
        checked = request.POST.getlist("checkbox")
        if "ups" in checked:
            request.user.profile.ups_name = ups_name
        if "address" in checked:
            request.user.profile.default_x = x
            request.user.profile.default_y = y
        request.user.save()
        package.dest_x = x
        package.dest_y = y
        package.ups_name = ups_name
        package.warehouse = cal_warehouse(x, y)
        package.save()
        print("deliver to: " + str(package.dest_x) + "  " + str(package.dest_y))
        context["info"] = "Purchase successful."
        context["is_checkout"] = True
        # once user checkout, the price will be final price
        for order in package.orders.all():
            order.item_price = order.item.price
            order.save()
        # send the purchase request to daemon
        purchase(package.id)
        send_email_async([request.user.email], package.info_str())
        return render(request, "amazon/success.html", context)
    else:
        context["total"] = package.total()
        context["package"] = package
        return render(request, "amazon/checkout.html", context)


@login_required
def shop_cart(request):
    orders = Order.objects.filter(owner=request.user).filter(package__isnull=True).order_by("creation_time")
    if request.method == 'POST':
        operation = request.POST["operation"]
        # user delete some order
        if operation == "delete":
            oid = request.POST["order_id"]
            orders.get(pk=oid).delete()
        elif operation == "checkout":
            # get all checked orders
            checked_orders = request.POST.getlist("checked_orders")
            print(checked_orders)
            # will only create a new package when at least one order is chosen
            if len(checked_orders) > 0:
                pack = Package(owner=request.user, warehouse=1)
                pack.save()
                for o in checked_orders:
                    print(orders.get(pk=int(o)))
                    pack.orders.add(orders.get(pk=int(o)))
                return redirect(reverse("checkout", kwargs={'package_id': pack.id}))
        # api for calculating the total price
        elif operation == "cal_total" and request.is_ajax():
            checked_orders = request.POST.getlist("checked_orders")
            total = 0.0
            for o in checked_orders:
                total += orders.get(pk=o).total()
            return JsonResponse({"total_cart": ("%.2f" % total)})
    total = 0
    for o in orders:
        total += o.total()
    context = {"orders": orders, "total": total}
    return render(request, "amazon/shopping_cart.html", context)


@login_required
def list_package(request):
    package_list = Package.objects.filter(owner=request.user).order_by('creation_time').all()
    item_dict = {}

    if request.method == "POST":
        search = request.POST["search"]
        search_list = []
        for pack in package_list:
            orders = Order.objects.filter(package__id=pack.id, item__description__icontains=search)
            if orders:
                search_list.append(pack)
        package_list = search_list

    for pack in package_list:
        orders = Order.objects.filter(package__id=pack.id)
        item_dict[pack.id] = orders

    context = {
        'package_list': package_list,
        'item_dict': item_dict,
    }
    return render(request, 'amazon/list_package.html', context)


@login_required
def delete_package(request, package_id):
    Package.objects.get(owner=request.user, id=package_id).delete()
    return HttpResponseRedirect(reverse('list-package'))


@login_required
def list_package_detail(request, package_id):
    context = {
        'product_list': Order.objects.filter(package__id=package_id),
        'pack': Package.objects.get(owner=request.user, id=package_id),
    }
    return render(request, 'amazon/list_package_detail.html', context)


""" ====== Below are functions for seller ====== """


@login_required
def item_management(request):
    items = Item.objects.filter(seller=request.user).all()
    context = {"items": items}
    return render(request, "amazon/item_management.html", context)


@login_required
def add_update_item(request, item_id):
    if not request.user.profile.is_seller:
        raise Http404("Your are not a seller")
    if request.method == "POST":
        # if the method is POST, we should use the id in POST data rather than URL
        item = request.POST["item_id"]
        description = request.POST["description"]
        price = float(request.POST["price"])
        category = request.POST.getlist("category")[0]
        # check whether it's a new category
        try:
            c = Category.objects.get(category=category)
        except Category.DoesNotExist:
            c = Category(category=category)
            c.save()
        if int(item) == -1:
            p = request.FILES["thumbnail"]
            img_name = description.replace(" ", "_") + "_" + request.user.username + "." + p.name.split(".")[1]
            save_img(img_name, p)
            # new item
            new_item = Item(
                description=description,
                price=price,
                category=c,
                img="/static/img/" + img_name,
                seller=request.user
            )
            new_item.save()
            context = {"is_add_item": True, "info": "Successful add the item."}
            return render(request, "amazon/success.html", context)
        else:
            # existing item
            old_item = Item.objects.get(pk=item)
            old_item.description = description
            old_item.price = price
            old_item.category = c
            old_item.save()
            return redirect(reverse("item_management"))

    context = {}
    categories = Category.objects.all()
    context["categories"] = categories
    if item_id != "-1":
        context["item"] = Item.objects.get(pk=int(item_id))
    return render(request, "amazon/item_add_update.html", context)


""" ====== Below are some ajax api ====== """


# ajax api for changing item count in the shopping cart
@login_required
def change_cnt(request):
    if request.is_ajax() and request.method == "POST":
        order_id = request.POST["order_id"]
        operation = request.POST["operation"]
        total_cart = float(request.POST["total_cart"])
        order = Order.objects.get(pk=order_id)
        # lower and upper limit --- 1 ~ 99
        if operation == "add" and order.item_cnt < 99:
            order.item_cnt += 1
            order.save()
            total_cart += order.item.price
        elif operation == "minus" and order.item_cnt > 1:
            order.item_cnt -= 1
            order.save()
            total_cart -= order.item.price
        data = {
            # latest count
            "cnt": order.item_cnt,
            # total price for the order
            "total_order": ("%.2f" % order.total()),
            # total price for all
            "total_cart": ("%.2f" % total_cart)
        }
        return JsonResponse(data)
    return JsonResponse({})


# check whether an item has already exist
@login_required
def check_item(request):
    if request.is_ajax() and request.method == "POST":
        new_item = request.POST["item_description"]
        item_id = request.POST["item_id"]
        try:
            # valid, as long as the item name has no duplication within current seller
            Item.objects.exclude(pk=int(item_id)).filter(seller=request.user).get(description=new_item)
            data = {"exist": True}
        except Item.DoesNotExist:
            data = {"exist": False}
        return JsonResponse(data)
    return JsonResponse({})


@login_required
def delete_item(request):
    if request.is_ajax() and request.method == "POST":
        item_id = request.POST["item_id"]
        data = {}
        item = Item.objects.get(pk=int(item_id))
        if item.on_sell:
            item.on_sell = False
            data["status"] = "removed"
            data["action"] = "Sell"
        else:
            item.on_sell = True
            data["status"] = "selling"
            data["action"] = "Delete"
        item.save()
        return JsonResponse(data)
    return JsonResponse({})
./web-app/users/

--- File: ./web-app/users/signals.py ---
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import Profile


@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_profile(sender, instance, **kwargs):
    instance.profile.save()
./web-app/users/migrations/

--- File: ./web-app/users/migrations/__init__.py ---
./web-app/users/migrations/__pycache__/

--- File: ./web-app/users/migrations/0001_initial.py ---
# Generated by Django 3.1.8 on 2025-04-24 20:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='auth.user')),
                ('is_seller', models.BooleanField(default=False)),
                ('ups_name', models.CharField(blank=True, default='', max_length=50)),
                ('default_x', models.IntegerField(blank=True, default=-1)),
                ('default_y', models.IntegerField(blank=True, default=-1)),
            ],
        ),
    ]

--- File: ./web-app/users/models.py ---
from django.db import models
from django.contrib.auth.models import User


class Profile(models.Model):
    user = models.OneToOneField(User, primary_key=True, on_delete=models.CASCADE)
    is_seller = models.BooleanField(default=False)
    ups_name = models.CharField(max_length=50, default="", blank=True)
    default_x = models.IntegerField(default=-1, blank=True)
    default_y = models.IntegerField(default=-1, blank=True)

    def __str__(self):
        return f'{self.user.username} Profile'

--- File: ./web-app/users/__init__.py ---
./web-app/users/__pycache__/

--- File: ./web-app/users/apps.py ---
from django.apps import AppConfig


class UsersConfig(AppConfig):
    name = 'users'

    def ready(self):
        import users.signals
--- File: ./web-app/users/forms.py ---
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import Profile


class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']


class UserUpdateForm(forms.ModelForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email']


class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['is_seller']

--- File: ./web-app/users/admin.py ---
from django.contrib import admin

# Register your models here.

--- File: ./web-app/users/utils.py ---
from django.contrib.auth.models import User
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError


def check_username(username, user):
    if " " in username:
        return ["username contains space"]
    if username != user.username:
        try:
            User.objects.get(username=username)
            return ["this name has already been used"]
        except User.DoesNotExist:
            return []
    return []


def check_password(old_p, new_p, user):
    # check old password
    if not user.check_password(old_p):
        return ["old password not match"]
    # check whether is the same
    if old_p == new_p:
        return ["old and new password are the same"]
    # check new password
    try:
        validate_password(new_p)
    except ValidationError as e:
        errors = []
        for error in e.error_list:
            errors.extend(error.messages)
        return errors
    return []

./web-app/users/templates/
./web-app/users/templates/users/

--- File: ./web-app/users/tests.py ---
from django.test import TestCase

# Create your tests here.

--- File: ./web-app/users/urls.py ---
from django.urls import path

from . import views

urlpatterns = [
   # path('register/', views.register, name="register"),
]

--- File: ./web-app/users/views.py ---
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.password_validation import password_validators_help_text_html
from django.shortcuts import render, redirect
from django.urls import reverse

from .forms import UserRegisterForm
from .utils import *


def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = UserRegisterForm()
    return render(request, 'users/register.html', {'form': form})


@login_required
def profile(request):
    context = {}
    user = request.user
    context["username"] = user.username
    context["email"] = user.email
    if request.method == 'POST':
        opera = request.POST["operation"]
        if opera == "update_profile":
            username = request.POST["username"]
            email = request.POST["email"]
            context["username"] = username
            context["email"] = email
            errors = check_username(username, user)
            if len(errors) == 0:
                user.username = username
                user.email = email
                user.save()
            else:
                context["name_errors"] = errors
        elif opera == "update_password":
            old_p = request.POST["old_password"]
            new_p = request.POST["new_password"]
            errors = check_password(old_p=old_p, new_p=new_p, user=user)
            if len(errors) == 0:
                user.set_password(new_p)
                user.save()
                messages.success(request, "successfully change the password")
                return redirect(reverse("login"))
            else:
                context["password_errors"] = errors
        elif opera == "update_seller":
            c = request.POST.getlist("register_seller")
            if len(c) == 0:
                user.profile.is_seller = False
            else:
                user.profile.is_seller = True
            user.profile.save()
        elif opera == "update_optional":
            ups_name = request.POST["ups_name"]
            default_x = request.POST["default_x"]
            default_y = request.POST["default_y"]
            if len(default_x) > 0:
                default_x = int(default_x)
                user.profile.default_x = default_x
            else:
                user.profile.default_x = -1
            if len(default_y) > 0:
                default_y = int(default_y)
                user.profile.default_y = default_y
            else:
                user.profile.default_y = -1
            user.profile.ups_name = ups_name
            user.save()

    context["help_text"] = password_validators_help_text_html
    return render(request, 'users/profile.html', context)




--- File: ./web-app/manage.py ---
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
./web-app/ERSSHW5/

--- File: ./web-app/ERSSHW5/asgi.py ---
"""
ASGI config for ERSSHW5 project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')

application = get_asgi_application()

--- File: ./web-app/ERSSHW5/__init__.py ---
./web-app/ERSSHW5/__pycache__/

--- File: ./web-app/ERSSHW5/settings.py ---
"""
Django settings for ERSSHW5 project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%f5o45o!1jroha1d&oc!d9cbhu3*v&27!3eb@jh_e)!+^!6k3l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["web", "0.0.0.0", "127.0.0.1", 'vcm-12385.vm.duke.edu', 'localhost', 'vcm-13663.vm.duke.edu']


# Application definition

INSTALLED_APPS = [
    'amazon.apps.AmazonConfig',
    'users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ERSSHW5.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ERSSHW5.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'NAME': 'amazon',
          'PASSWORD': 'postgres',
          'USER': 'postgres',
          'HOST': 'db',
          'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'login'


--- File: ./web-app/ERSSHW5/urls.py ---
"""ERSSHW5 URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include

from users import views as user_views

urlpatterns = [
    path('admin/', admin.site.urls),
    # redirect all user related pages to user app(which should handle the authentication)
    path('users/', include('users.urls')),
    path('register/', user_views.register, name='register'),
    path('profile/', user_views.profile, name='profile'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'),
    # redirect all pages to amazon
    path('', include('amazon.urls'))
]

--- File: ./web-app/ERSSHW5/wsgi.py ---
"""
WSGI config for ERSSHW5 project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')

application = get_wsgi_application()
./daemon/
./daemon/gradle/
./daemon/gradle/wrapper/
./daemon/src/
./daemon/src/main/
./daemon/src/main/java/
./daemon/src/main/java/edu/
./daemon/src/main/java/edu/duke/
./daemon/src/main/java/edu/duke/ece568/
./daemon/src/main/java/edu/duke/ece568/erss/
./daemon/src/main/java/edu/duke/ece568/erss/amazon/
./daemon/src/main/java/edu/duke/ece568/erss/amazon/listener/
./daemon/src/main/java/edu/duke/ece568/erss/amazon/proto/

--- File: ./daemon/src/main/java/edu/duke/ece568/erss/amazon/proto/ups_amazon.proto ---
syntax = "proto2";
import "world_amazon.proto";

package amazon;

option java_package = "edu.duke.ece568.erss.amazon.proto";
option java_outer_classname = "AmazonUPSProtocol";

message AmazonToUPS {
  repeated int64 acks = 123;
  repeated RequestPickup request_pickup = 1;
  repeated Redirect redirect = 2;
  repeated Cancel cancel = 3;
  repeated LoadReady load_ready = 4;
}

message UPSToAmazon {
  repeated int64 acks = 123;
  repeated PickupResp pickup_resp = 1;
  repeated RedirectResp redirect_resp = 2;
  repeated CancelResp cancel_resp = 3;
  repeated TruckArrived truck_arrived = 4;
  repeated DeliveryStarted delivery_started = 5;
  repeated DeliveryComplete delivery_complete = 6;
}

message Coordinate {
  required int32 x = 1;
  required int32 y = 2;
}

message ItemInfo {
  required string item_name = 1;
  required int32 quantity = 2;
}

//Amazon to UPS
message RequestPickup {
  required int64 seqnum = 123;
  required int64 ups_user_id = 1;
  repeated ItemInfo items = 2;
  required int64 order_id = 3;
  required int32 warehouse_id = 4;
  required Coordinate user_destination = 5;
}

message Redirect {
  required int64 seqnum = 123;
  required int64 package_id = 1;
  required Coordinate new_destination = 2;
}

message Cancel {
  required int64 seqnum = 123;
  required int64 package_id = 1;
}

message LoadReady {
  required int64 seqnum = 123;
  required int64 package_id = 1;
}

message ReturnAck {
  required int64 seqnum = 123;
  required int64 package_id = 1;
}

// UPS to Amazon

message PickupResp {
  required int64 seqnum = 123;
  required int64 package_id = 1;
  required int64 order_id = 2;
  required int32 truck_id = 3;
}


message RedirectResp {
  required int64 seqnum = 123;
  required int64 package_id = 1;
  required bool success = 2;
  required string reason = 3;
}

message CancelResp {
  required int64 seqnum = 123;
  required int64 package_id = 1;
  required bool success = 2;
  required string reason = 3;
}

message TruckArrived {
  required int64 seqnum = 123;
  required int64 package_id = 1;
  required int32 truck_id = 2;
  required int32 warehouse_id = 3;
}

message DeliveryStarted {
  required int64 seqnum = 123;
  required int64 package_id = 1;
}

message DeliveryComplete {
  required int64 seqnum = 123;
  required int64 package_id = 1;
}

--- File: ./daemon/src/main/java/edu/duke/ece568/erss/amazon/proto/world_amazon.proto ---
syntax = "proto2";

package amazon;

option java_package = "edu.duke.ece568.erss.amazon.proto";
option java_outer_classname = "WorldAmazonProtocol";

message AProduct{
  required int64 id = 1;
  required string description = 2;
  required int32 count = 3;
}

message AInitWarehouse{
  required int32 id = 1;
  required int32 x = 2;
  required int32 y = 3;
}

message AConnect{
  optional int64 worldid = 1;
  repeated AInitWarehouse initwh = 2;
  required bool isAmazon = 3;
}

message AConnected{
  required int64 worldid= 1;
  required string result = 2;
}

message APack{
  required int32 whnum = 1;
  repeated AProduct things = 2;
  required int64 shipid = 3;
  required int64 seqnum = 4;
}

message APacked {
  required int64 shipid = 1;
  required int64 seqnum = 2;
}

message ALoaded{
  required int64 shipid = 1;
  required int64 seqnum = 2;
}

message APutOnTruck{
  required int32 whnum = 1;
  required int32 truckid = 2;
  required int64 shipid = 3;
  required int64 seqnum = 4;
}

message APurchaseMore{
  required int32 whnum = 1;
  repeated AProduct things = 2;
  required int64 seqnum = 3;
}

message AErr{
  required string err = 1;
  required int64 originseqnum = 2;
  required int64 seqnum = 3;
}

message AQuery{
  required int64 packageid = 1;
  required int64 seqnum = 2;
}

message APackage{
  required int64 packageid =1;
  required string status = 2;
  required int64 seqnum = 3;
}

message ACommands {
  repeated APurchaseMore buy = 1;
  repeated APack topack = 2; 
  repeated APutOnTruck load = 3;
  repeated AQuery queries = 4;
  optional uint32 simspeed = 5; 
  optional bool disconnect = 6;
  repeated int64 acks =7;
}

message AResponses {
  repeated APurchaseMore arrived = 1;
  repeated APacked ready = 2; 
  repeated ALoaded loaded = 3; 
  optional bool finished = 4;
  repeated AErr error = 5;
  repeated int64 acks = 6;
  repeated APackage packagestatus = 7;
}


--- File: ./daemon/src/main/java/edu/duke/ece568/erss/amazon/proto/world_ups.proto ---
syntax = "proto2";

package ups;

option java_package = "edu.duke.ece568.erss.amazon.proto";
option java_outer_classname = "WorldUPSProtocol";

message UInitTruck{
  required int32 id = 1;
  required int32 x=2;
  required int32 y=3;
}
message UConnect{
  optional int64 worldid = 1;
  repeated UInitTruck trucks=2;
  required bool isAmazon = 3;
}

message UConnected{
  required int64 worldid = 1;
  required string result = 2;
}

message UGoPickup{
  required int32 truckid = 1;
  required int32 whid = 2;
  required int64 seqnum = 3;
}

message UFinished{
  required int32 truckid = 1;
  required int32 x = 2;
  required int32 y = 3;
  required string status = 4;
  required int64 seqnum = 5;
}

message UDeliveryMade{
  required int32 truckid = 1;
  required int64 packageid = 2;
  required int64 seqnum = 3;
}

message UDeliveryLocation{
  required int64 packageid = 1;
  required int32 x = 2;
  required int32 y = 3;
}

message UGoDeliver{
  required int32 truckid = 1;
  repeated UDeliveryLocation packages = 2;
  required int64 seqnum = 3;
}

message UErr{
  required string err = 1;
  required int64 originseqnum = 2;
  required int64 seqnum = 3;
}

message UQuery{
  required int32 truckid =1; 
  required int64 seqnum = 2;
}

message UTruck{
  required int32 truckid =1;
  required string status = 2;
  required int32 x = 3;
  required int32 y = 4;
  required int64 seqnum = 5;
}

message UCommands{
  repeated UGoPickup pickups = 1;
  repeated UGoDeliver deliveries = 2;
  optional uint32 simspeed = 3;
  optional bool disconnect = 4;
  repeated UQuery queries = 5;
  repeated int64 acks = 6;
}

message UResponses{
  repeated UFinished completions = 1;
  repeated UDeliveryMade delivered = 2;
  optional bool finished = 3;
  repeated int64 acks = 4;
  repeated UTruck truckstatus = 5;
  repeated UErr error = 6;
}./nginx/
./nginx/config/
./worldSim/
./worldSim/docker_deploy/
