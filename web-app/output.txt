=== PROJECT FILE STRUCTURE ===
  |  |-__init__.py
  |  |  |-__init__.cpython-38.pyc
  |  |  |-admin.cpython-38.pyc
  |  |  |-apps.cpython-38.pyc
  |  |  |-models.cpython-38.pyc
  |  |  |-urls.cpython-38.pyc
  |  |  |-utils.cpython-38.pyc
  |  |  |-views.cpython-38.pyc
  |  |-admin.py
  |  |-apps.py
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-0001_initial.cpython-38.pyc
  |  |  |-0001_initial.py
  |  |-models.py
  |  |  |  |-main.css
  |  |  |  |-apple.jpg
  |  |  |  |-banner1.png
  |  |  |  |-fried_chicken.jpg
  |  |  |  |-ipad_mini.jpg
  |  |  |  |-ipad_pro.jpg
  |  |  |  |-ipad.jpg
  |  |  |  |-logo.png
  |  |  |  |-magic_keyboard.jpg
  |  |  |  |-orange.jpg
  |  |  |  |-sample.jpg
  |  |  |  |-jquery-3.5.0.min.js
  |  |  |  |-jquery.tablesorter.js
  |  |  |  |-base.html
  |  |  |  |-checkout.html
  |  |  |  |-home.html
  |  |  |  |-item_add_update.html
  |  |  |  |-item_detail.html
  |  |  |  |-item_management.html
  |  |  |  |-list_package_detail.html
  |  |  |  |-list_package.html
  |  |  |  |-shopping_cart.html
  |  |  |  |-success.html
  |  |-tests.py
  |  |-urls.py
  |  |-utils.py
  |  |-views.py
  |-Dockerfile
  |  |-__init__.py
  |  |  |-__init__.cpython-38.pyc
  |  |  |-settings.cpython-38.pyc
  |  |  |-urls.cpython-38.pyc
  |  |  |-wsgi.cpython-38.pyc
  |  |-asgi.py
  |  |-settings.py
  |  |-urls.py
  |  |-wsgi.py
  |-initserver.sh
  |-manage.py
  |-output.txt
  |-print_all.sh
  |-requirements.txt
  |-runserver.sh
  |  |-__init__.py
  |  |  |-__init__.cpython-38.pyc
  |  |  |-admin.cpython-38.pyc
  |  |  |-apps.cpython-38.pyc
  |  |  |-forms.cpython-38.pyc
  |  |  |-models.cpython-38.pyc
  |  |  |-signals.cpython-38.pyc
  |  |  |-urls.cpython-38.pyc
  |  |  |-utils.cpython-38.pyc
  |  |  |-views.cpython-38.pyc
  |  |-admin.py
  |  |-apps.py
  |  |-forms.py
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-0001_initial.cpython-38.pyc
  |  |  |-0001_initial.py
  |  |-models.py
  |  |-signals.py
  |  |  |  |-login.html
  |  |  |  |-logout.html
  |  |  |  |-profile.html
  |  |  |  |-register.html
  |  |-tests.py
  |  |-urls.py
  |  |-utils.py
  |  |-views.py
  |-wait-for-it.sh


./
./amazon/
./amazon/migrations/

--- File: ./amazon/migrations/__init__.py ---
./amazon/migrations/__pycache__/

--- File: ./amazon/migrations/0001_initial.py ---
# Generated by Django 3.1.8 on 2025-04-24 20:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('price', models.FloatField(default=0.99)),
                ('img', models.CharField(default='/static/img/sample.jpg', max_length=50)),
                ('on_sell', models.BooleanField(default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='amazon.category')),
                ('seller', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WareHouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.IntegerField(default=1)),
                ('y', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warehouse', models.IntegerField(default=1)),
                ('status', models.CharField(default='processing', max_length=100)),
                ('dest_x', models.IntegerField(default=10)),
                ('dest_y', models.IntegerField(default=10)),
                ('creation_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('ups_name', models.CharField(blank=True, default='', max_length=50)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_cnt', models.IntegerField(default=1)),
                ('item_price', models.FloatField(default=0.99)),
                ('creation_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='amazon.item')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='amazon.package')),
            ],
        ),
    ]

--- File: ./amazon/models.py ---
from django.contrib.auth.models import User
from django.db import models
from django.utils.timezone import now

# Create your models here.

"""
README
use real amazon as reference
Item stands for the actual item we are selling.
Order stands for an order, contains an item and count.
Package stands for one pack, contains delivery-related information and list of orders.
1. Every time use click "add to cart" or "place order", we will create a new order
(NOTE: this action should happen in the item detail page)
    1.1 if user click "add to cart", we will leave the package field of order NULL
    1.2 if user click "place order", we will create a new package, and add this order into package
2. To fetch the shop car of one user ---> user.orders.filter(package__isnull=True)
3. To fetch all historical packages of one user ---> user.packages
"""


# warehouse class, used to initial a list of ware house
class WareHouse(models.Model):
    x = models.IntegerField(default=1)
    y = models.IntegerField(default=1)

    def __str__(self):
        return "<" + str(self.x) + ", " + str(self.y) + ">"


# The category of different items.
class Category(models.Model):
    category = models.CharField(max_length=50, blank=False, null=False)

    def __str__(self):
        return self.category


# This is the class which represent one specific item.
class Item(models.Model):
    description = models.CharField(max_length=100, blank=False, null=False)
    # below are some values we might want for advance feature(we can add more)
    price = models.FloatField(default=0.99, blank=False, null=False)
    img = models.CharField(max_length=50, default="/static/img/sample.jpg")
    # even we delete the seller or category info, we should still keep the item info
    # since there will be some history order referring to it
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    seller = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    on_sell = models.BooleanField(default=True)

    def __str__(self):
        return self.description


# This stands for a package(stands for one purchase).
# each package can contains several orders(e.g. package.orders.all())
class Package(models.Model):
    # user info
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="packages")
    # the warehouse id where this package stores
    warehouse = models.IntegerField(default=1)
    # the status of current package, possible value:
    # processing --- purchase but not receive the successful message
    # processed  --- purchase successful
    # packing    --- package arrived warehouse and is packing
    # packed     --- package is packed
    # loading    --- the truck arrived at warehouse and is loading
    # loaded     --- finish loading
    # delivering --- delivering to destination
    # delivered  --- delivered(final state of this package)
    # error      --- any error state(should follow by the actual error message, e.g. error: illegal item)
    status = models.CharField(max_length=100, default="processing")
    dest_x = models.IntegerField(default=10)
    dest_y = models.IntegerField(default=10)
    creation_time = models.DateTimeField(default=now)
    # associate ups account name for this package(optional)
    ups_name = models.CharField(max_length=50, default="", blank=True)

    def total(self):
        total = 0
        for order in self.orders.all():
            total += order.total()
        return total

    # NOTE: this value will not change according the item price(aka it's fixed)
    def total_fixed(self):
        total = 0
        for order in self.orders.all():
            total += order.total_fixed()
        return total

    def info_str(self):
        info = "Your order has successfully been placed.\nDetail info:\n"
        for order in self.orders.all():
            info += "* %d %s(total $ %.2f)\n" % (order.item_cnt, order.item.description, order.total_fixed())
        info += "total: $%.2f" % (self.total_fixed())
        return info

    def __str__(self):
        return "<" + str(self.warehouse) + ", " + self.status + ">"


# order = item id + item counts (+ item price)
class Order(models.Model):
    # user info
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
    item = models.ForeignKey(Item, on_delete=models.SET_NULL, null=True)
    item_cnt = models.IntegerField(default=1)
    # since seller can change the price, but the price of any finished order can't be change
    # so we need to store the price info of any finished order
    item_price = models.FloatField(default=0.99)
    # package id
    package = models.ForeignKey(Package, on_delete=models.CASCADE, related_name="orders", null=True, blank=True)
    creation_time = models.DateTimeField(default=now)

    # return the total price for current order
    def total(self):
        return self.item_cnt * self.item.price

    # return the total price for current order
    # NOTE: this value will not change according the item price(aka it's fixed)
    def total_fixed(self):
        return self.item_cnt * self.item_price

    def __str__(self):
        return "<" + str(self.package_id) + ", <" + str(self.item_id) + ', ' + str(self.item_cnt) + ">>"


--- File: ./amazon/__init__.py ---
./amazon/__pycache__/

--- File: ./amazon/apps.py ---
from django.apps import AppConfig
from django.db.models.signals import post_migrate


# This function will check whether there are default users, and will create two if not.
def default_users():
    from django.contrib.auth.models import User
    try:
        User.objects.get(username="mini_amazon")
    except User.DoesNotExist:
        mini_amazon = User.objects.create(
            username="mini_amazon",
            email="miniamazon@noreply.com",
            is_superuser=False
        )
        mini_amazon.set_password("amazon12345")
        mini_amazon.profile.is_seller = True
        mini_amazon.save()
    try:
        User.objects.get(username="xkw")
    except User.DoesNotExist:
        xkw = User.objects.create(
            username="xkw",
            email="xkw@noreply.com",
            is_superuser=False
        )
        xkw.set_password("xkw12345")
        xkw.profile.is_seller = True
        xkw.save()


# This function will check whether there are default category of products, and will create if not.
def default_category():
    from amazon.models import Category
    if Category.objects.all().count() == 0:
        Category.objects.create(category="fruit")
        Category.objects.create(category="food")
        Category.objects.create(category="electronic")


# This function will check whether there are default products, and will create if not.
def default_items():
    from django.contrib.auth.models import User
    from amazon.models import Item, Category
    if Item.objects.all().count() == 0:
        # at the first time, we should insert some default data
        amazon = User.objects.get(username="mini_amazon")
        xkw = User.objects.get(username="xkw")
        fruit = Category.objects.get(category="fruit")
        food = Category.objects.get(category="food")
        electronic = Category.objects.get(category="electronic")
        Item.objects.create(
            description="apple", price=1.99,
            img="/static/img/apple.jpg", category=fruit,
            seller=xkw
        )
        Item.objects.create(
            description="orange", price=0.99,
            img="/static/img/orange.jpg", category=fruit,
            seller=xkw
        )
        Item.objects.create(
            description="Fried Chicken", price=5.99,
            img="/static/img/fried_chicken.jpg", category=food,
            seller=xkw
        )
        Item.objects.create(
            description="iPad Mini", price=399.99,
            img="/static/img/ipad_mini.jpg", category=electronic,
            seller=amazon
        )
        Item.objects.create(
            description="iPad", price=429.99,
            img="/static/img/ipad.jpg", category=electronic,
            seller=amazon
        )
        Item.objects.create(
            description="iPad Pro", price=1099.99,
            img="/static/img/ipad_pro.jpg", category=electronic,
            seller=amazon
        )
        Item.objects.create(
            description="Magic Keyboard", price=129.99,
            img="/static/img/magic_keyboard.jpg", category=electronic,
            seller=amazon
        )


def default_warehouse():
    from amazon.models import WareHouse
    # create 10 warehouse
    for x, y in zip(range(10, 110, 10), range(10, 110, 10)):
        WareHouse.objects.create(x=x, y=y)


def migrate_callback(sender, **kwargs):
    default_users()
    default_category()
    default_items()
    default_warehouse()


class AmazonConfig(AppConfig):
    name = 'amazon'

    def ready(self):
        post_migrate.connect(migrate_callback, sender=self)

--- File: ./amazon/admin.py ---
from django.contrib import admin
from .models import Package, Order, Item

# Register your models here.
admin.site.register(Item)
admin.site.register(Package)
admin.site.register(Order)
--- File: ./amazon/utils.py ---
import socket
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from PIL import Image
from amazon.models import WareHouse
from concurrent.futures import ThreadPoolExecutor
import math

# email address info
SMTP_SERVER = 'smtp.gmail.com:587'
USER_ACCOUNT = {
    'username': 'ece568noreply@gmail.com',
    'password': 'ece568code'
}
pool = ThreadPoolExecutor(10)


def send_email_async(receivers, text):
    pool.submit(send_email, receivers, text)


def send_email(receivers, text):
    msg_root = MIMEMultipart()
    msg_root['Subject'] = "Info from Mini Amazon 568"
    msg_root['To'] = ", ".join(receivers)
    msg_text = MIMEText(text)
    msg_root.attach(msg_text)

    smtp = smtplib.SMTP(SMTP_SERVER)
    smtp.starttls()
    smtp.login(USER_ACCOUNT["username"], USER_ACCOUNT["password"])
    smtp.sendmail(USER_ACCOUNT["username"], receivers, msg_root.as_string())
    smtp.quit()


def save_img(name, data):
    img = Image.open(data)
    img.save("/code/amazon/static/img/%s" % (name), "JPEG", optimize=1)


# calculate the nearest warehouse for the location
def cal_warehouse(x, y):
    whs = WareHouse.objects.all()
    min_id = 1
    min_dest = 65535
    for wh in whs:
        dest = math.sqrt(math.pow(wh.x - x, 2) + math.pow(wh.y - y, 2))
        if dest < min_dest:
            min_dest = dest
            min_id = wh.id
    return min_id


# Tell the daemon to purchase something, which specify by the package id.
# front-end should first store the package into DB and then notify the daemon by sending the id.
def purchase(package_id):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # use port 8888 to communicate with daemon
    client.connect(('daemon', 8888))
    # NOTE: append a \n at the end to become a line
    msg = str(package_id) + '\n'
    client.send(msg.encode('utf-8'))
    # expected response: ack:<package_id>
    data = client.recv(1024)
    data = data.decode()
    res = data.split(":")
    if res[0] == "ack" and res[1] == str(package_id):
        return True
    print('recv:', data)
    return False


if __name__ == '__main__':
    send_email_async(["xiakewei96@gmail.com"], "hello")
./amazon/static/
./amazon/static/amazon/

--- File: ./amazon/static/amazon/main.css ---
/* global css */
body {
    background: #fafafa;
    color: #333333;
    margin-top: 5rem;
}

h1, h2, h3, h4, h5, h6 {
    color: #444444;
}

ul {
    margin: 0;
}

.bg-steel {
    background-color: #5f788a;
}

.site-header .navbar-nav .nav-link {
    color: #cbd5db;
}

.site-header .navbar-nav .nav-link:hover {
    color: #ffffff;
}

.site-header .navbar-nav .nav-link.active {
    font-weight: 500;
}

.content-section {
    background: #ffffff;
    padding: 10px 20px;
    border: 1px solid #dddddd;
    border-radius: 3px;
    margin-bottom: 20px;
}

.account-img {
    height: 125px;
    width: 125px;
    margin-right: 20px;
    margin-bottom: 16px;
}

.account-heading {
    font-size: 2.5rem;
}

/* css for home page */
.listitem {
    float: inside;
    padding: 15px;
    margin: 20px 22px;
    background: #FFFFFF;
    /*opacity: 0.5;*/
    border: 1px solid #647888;
}

.listitem:hover{
    border: 3px solid #7bc27a;
    transition: all 0.5s linear;
}

.listitem a {
    text-decoration: none;
}

.listitem a img {
    width: 180px;
    height: 200px;
}

.listitem a p {
    color: #7bc27a;
    font-size: 14px;
    margin-top: 5px;
    margin-bottom: 5px;
    text-align: center;
}

.searchbar:hover{
    border: 3px solid #7bc27a;
    transition: all 0.5s linear;
}

.navbar-brand img {
    height: 36px;
}

.navbar-nav .nav-link small {
    font-size: 0.75rem;
    line-height: 1rem;
    display: block;
}

.bg-steel {
    background-color: #131921 !important;
}
.navbar-nav .nav-link {
    color: white !important;
}

/* 横向滚动条优化 */
.d-flex::-webkit-scrollbar {
    height: 6px;
  }
  .d-flex::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 3px;
  }
  .d-flex::-webkit-scrollbar-track {
    background-color: transparent;
  }

  .card {
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    transition: transform 0.2s ease-in-out;
  }
  .card:hover {
    transform: scale(1.03);
  }
  
  
/* Make navbar float over banner */
.site-header {
    position: absolute;
    width: 100%;
    z-index: 10;
}

/* Prevent banner margin collapse */
body {
    padding-top: 60px;
    margin: 0;
}
./amazon/static/js/
./amazon/static/img/
./amazon/templates/
./amazon/templates/amazon/

--- File: ./amazon/templates/amazon/shopping_cart.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>Shopping Cart</h1>
    <!-- order list -->
    {% if orders %}
        <!-- NOTE: nested form is not allowed!!! -->
        <form id="form_orders" name="form_orders" action="{% url 'shop_cart' %}" method="post">
            {% csrf_token %}
            <div class="table-responsive mt-4 table-hover">
                <table id="order_table" class="table">
                    <thead>
                    <tr class="row text-center">
                        <th class="col-1">
                            <input class="form-check-input" type="checkbox" id="check_all">
                            <label class="form-check-label" for="check_all">#</label>
                        </th>
                        <!-- thumbnail + description -->
                        <th class="col-3 text-left">
                            <a href="#" style="color: #080000;">Item
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <th class="col-2">
                            <a href="#" style="color: #080000;">Qty
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <th class="col-2">
                            <a href="#" style="color: #080000;">Price
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <th class="col-2">
                            <a href="#" style="color: #080000;">Total
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <!-- delete button -->
                        <th class="col-2"></th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for order in orders %}
                        <tr class="row text-center border-bottom">
                            <td class="col-1 align-self-center border-top-0">
                                <input class="form-check-input" type="checkbox" value="{{ order.id }}"
                                       name="checked_orders" id="checkbox{{ order.id }}">
                                <label class="form-check-label"
                                       for="checkbox{{ order.id }}"> {{ forloop.counter }}</label>
                            </td>
                            <td class="col-3 text-left border-top-0">
                                <img class="img-thumbnail" style="width: 50px; height: 50px" src="{{ order.item.img }}">
                                {{ order.item.description }}
                            </td>
                            <td class="col-2 align-self-center border-top-0">
                                <button type="button" class="btn" onclick="change_cnt({{ order.id }}, false)">
                                    <i class="fa fa-minus-square-o"></i>
                                </button>
                                <span id="cnt{{ order.id }}">{{ order.item_cnt }}</span>
                                <button type="button" class="btn" onclick="change_cnt({{ order.id }}, true)">
                                    <i class="fa fa-plus-square-o"></i>
                                </button>
                            </td>
                            <td class="col-2 align-self-center border-top-0">
                                &dollar; {{ order.item.price|floatformat:2 }}</td>
                            <td class="col-2 align-self-center border-top-0">
                                &dollar;
                                <span id="total_order{{ order.id }}">{{ order.total|floatformat:2 }}</span>
                            </td>
                            <td class="col-2 align-self-center border-top-0">
                                <button onclick="delete_order({{ order.id }})" class="btn btn-outline-secondary">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <!-- total price -->
            <div class="row">
                <div class="col-5 offset-7 text-right mt-4 mb-4">
                    <b>Total(all items): </b>
                    <span style="color: red">&dollar;</span>
                    <span id="total_cart" style="color: red">{{ total|floatformat:2 }}</span>
                </div>
            </div>
            <div class="text-right">
                <button onclick="check_out()" class="btn btn-primary"><i class="fa fa-dollar"></i> Checkout</button>
            </div>
        </form>
    {% else %}
        <h4 class="m-4">Nothing in your shopping cart,
            <a href="{% url 'home' %}">buy something TODAY!</a>
        </h4>
    {% endif %}
{% endblock content %}

<!-- javascript -->
{% block script %}
    <!-- jQiery table sorter plugin -->
    {% load static %}
    <script src="{% static "js/jquery.tablesorter.js" %}"></script>

    <script type="text/javascript">
        function delete_order(order_id) {
            add_operation_type(document.form_orders, "delete")
            const id_field = document.createElement("input")
            id_field.type = "hidden"
            id_field.name = "order_id"
            id_field.value = order_id
            document.form_orders.appendChild(id_field)
            document.form_orders.submit();
        }

        function check_out() {
            add_operation_type(document.form_orders, "checkout")
            document.form_orders.submit()
        }

        function add_operation_type(element, type) {
            const operation_field = document.createElement("input");
            operation_field.type = "hidden"
            operation_field.name = "operation"
            operation_field.value = type
            element.appendChild(operation_field)
        }

        function change_cnt(id, isAdd) {
            let opera;
            if (isAdd) {
                opera = "add";
            } else {
                opera = "minus";
            }
            const total = $("#total_cart").text();
            // use ajax to communicate with backend, change the count of specific order
            const config = {
                "url": "{% url "change_cnt" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": {
                    "order_id": id,
                    "operation": opera,
                    "total_cart": total,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                "success": function (result) {
                    $("#total_order" + id).text(result["total_order"]);
                    $("#cnt" + id).text(result["cnt"]);
                    // only update the total price if this order is checked
                    if ($("#checkbox" + id).is(":checked")) {
                        $("#total_cart").text(result["total_cart"]);
                    }
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }

        $("#check_all").on("click", function () {
            if (this.checked) {
                // use "prop" to set the value of all checkboxes
                $(":checkbox").prop("checked", true);
            } else {
                $(":checkbox").prop("checked", false);
            }
            // refresh total price
            cal_total();
        });

        const checkboxes = $("input[name='checked_orders']");
        checkboxes.on("click", function () {
            if (this.checked) {
                let i = 0;
                for (i = 0; i < checkboxes.length; i++) {
                    if (!checkboxes[i].checked) {
                        break;
                    }
                }
                if (i === checkboxes.length) {
                    $("#check_all").prop("checked", true);
                }
            } else {
                $("#check_all").prop("checked", false);
            }
            // refresh total price
            cal_total();
        });

        // this function will be called once the page is loaded
        $(function () {
            $(":checkbox").prop("checked", true);
            cal_total();
            $("#order_table").tablesorter({
                headers: {
                    0: {sorter: false}
                }
            });
        })

        // calculate the total price
        function cal_total() {
            add_operation_type(document.form_orders, "cal_total")
            const config = {
                "url": "{% url "shop_cart" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": $("#form_orders").serialize(),
                "success": function (result) {
                    $("#total_cart").text(result["total_cart"]);
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }
    </script>
{% endblock script %}
--- File: ./amazon/templates/amazon/home.html ---
{% extends "amazon/base.html" %} {% load static %} {% block content %} {% if
seller_name %}
<h1>Welcome to {{ seller_name }}'s selling page.</h1>
{% else %}
<h1>Welcome to mini amazon website</h1>
{% endif %}

<!-- search bar -->
<form method="POST">
  {% csrf_token %}
  <!-- use offset to implement center in row -->
  <div
    class="input-group p-2 col-md-8 offset-2 bg-light rounded rounded-pill shadow-sm mt-4 searchbar"
  >
    <input
      name="search"
      type="search"
      placeholder="What do you want?"
      class="form-control border-0 bg-light"
      style="outline: none; border: 0; box-shadow: none"
    />
    <div class="input-group-append">
      <button type="submit" class="btn btn-link text-primary">
        <!-- search icon -->
        <i class="fa fa-search"></i>
      </button>
    </div>
  </div>
</form>

<!-- Amazon-style Hero Banner -->
<div
  id="heroBanner"
  class="carousel slide"
  data-ride="carousel"
  style="z-index: 1; position: relative"
>
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img
        src="{% static 'img/sample.jpg' %}"
        class="d-block w-100"
        alt="Banner 1"
        style="height: 70vh; object-fit: cover"
      />
    </div>
    <div class="carousel-item">
      <img
        src="{% static 'img/ipad.jpg' %}"
        class="d-block w-100"
        alt="Banner 2"
        style="height: 70vh; object-fit: cover"
      />
    </div>
    <div class="carousel-item">
      <img
        src="{% static 'img/orange.jpg' %}"
        class="d-block w-100"
        alt="Banner 3"
        style="height: 70vh; object-fit: cover"
      />
    </div>
  </div>
  <a
    class="carousel-control-prev"
    href="#heroBanner"
    role="button"
    data-slide="prev"
  >
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a
    class="carousel-control-next"
    href="#heroBanner"
    role="button"
    data-slide="next"
  >
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>
</div>

<!-- item list -->
{% if items %}
<div
  class="container"
  style="margin-top: -120px; position: relative; z-index: 2"
>
  {% for cat in categories %}
  <section class="mb-5">
    <h4 class="mt-4">{{ cat.category|capfirst }}</h4>
    <div class="d-flex flex-row overflow-auto pb-2">
      {% for item in items %} {% if item.category.category == cat.category %}
      <div class="card m-2 shadow-sm border-0" style="min-width: 180px">
        <a
          href="{% url 'item_detail' item.id %}"
          class="text-decoration-none text-dark"
        >
          <img
            src="{{ item.img }}"
            class="card-img-top"
            style="height: 180px; object-fit: contain"
          />
          <div class="card-body px-2">
            <h6 class="card-title">{{ item.description }}</h6>
            <p class="card-text text-danger mb-0">
              $ {{ item.price|floatformat:2 }}
            </p>
            <small class="text-muted">Sold by {{ item.seller.username }}</small>
          </div>
        </a>
      </div>
      {% endif %} {% endfor %}
    </div>
  </section>
  {% endfor %}
</div>

{% else %}
<h4 class="m-4">Nothing match the query</h4>
{% endif %} {% endblock content %}

--- File: ./amazon/templates/amazon/base.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    {% load static %}
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css"
          integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <link href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css" rel="stylesheet">
   
    <!-- Add Roboto or Open Sans (Amazon-style fonts) -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" rel="stylesheet">
    <style>
    body {
        font-family: 'Open Sans', sans-serif;
    }
    </style>


    <link rel="stylesheet" type="text/css" href="{% static 'amazon/main.css' %}">

    {% if title %}
        <title>Mini Amazon - {{ title }}</title>
    {% else %}
        <title>Mini Amazon</title>
    {% endif %}
</head>
<body>
<header class="site-header">
    <!-- initial a navigation bar -->
    <nav class="navbar navbar-expand-md navbar-dark bg-steel fixed-top">
        <div class="container">
            <a class="navbar-brand mr-4 d-flex align-items-center" href="{% url 'home' %}">
                <img src="{% static 'img/logo.png' %}" alt="Logo" style="height: 40px;">
            </a>
            
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarToggle"
                    aria-controls="navbarToggle" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <!-- use mr-auto to push all other elements to the right side -->
            <div class="collapse navbar-collapse" id="navbarToggle">
                <!-- use mr-auto to push all other elements to the right side -->
                <ul class="navbar-nav mr-auto">
                    <li>
                        <a class="nav-item nav-link" href="{% url 'home' %}">Home</a>
                    </li>
                    {% if categories and category %}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                {{ category|capfirst }}
                            </a>
                            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                                <a class="dropdown-item" href="{% url "home" %}">All</a>
                                <div class="dropdown-divider"></div>
                                {% for c in categories %}
                                    <a class="dropdown-item"
                                       href="{% url "home_category" c.category %}">{{ c.category|capfirst }}</a>
                                {% endfor %}
                            </div>
                        </li>
                    {% endif %}
                </ul>

                <!-- Navbar Right Side -->
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="accountDropdown" role="button"
                               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                Hello, {{ user.username }} <br><small>Account & Lists</small>
                            </a>
                            <div class="dropdown-menu" aria-labelledby="accountDropdown">
                                <a class="dropdown-item" href="{% url 'profile' %}">Account</a>
                                <a class="dropdown-item" href="{% url 'list-package' %}">Orders</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="{% url 'logout' %}">Logout</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link d-flex flex-column text-center" href="{% url 'list-package' %}">
                                Returns <br><small>& Orders</small>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link position-relative" href="{% url 'shop_cart' %}">
                                <i class="fa fa-shopping-cart fa-lg"></i>
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                    {{ cart_count }}
                                </span>
                            </a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'login' %}">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'register' %}">Register</a>
                        </li>
                    {% endif %}
                </ul>
                
            </div>
        </div>
    </nav>
</header>
<!-- By default, use container for each page. -->
<main role="main" class="container">
    {% block content %}
    {% endblock %}
</main>

<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js"
        integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n"
        crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"
        integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js"
        integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6"
        crossorigin="anonymous"></script>
<!-- jQuery library -->
<script src="{% static "js/jquery-3.5.0.min.js" %}"></script>

<!-- example from Bootstrap, check the validation of the form -->
<script type="text/javascript">
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            const validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>

{% block script %}
{% endblock %}
</body>
</html>
--- File: ./amazon/templates/amazon/list_package.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h3>&nbsp;&nbsp;Your Orders</h3>
    <br>
    <div class="content-section">
        {% if package_list %}
            <!--search-bar-->
            <form method="POST">
                {% csrf_token %}
                <div class="input-group p-2 col-md-8 offset-2 bg-light rounded rounded-pill shadow-sm mt-4 searchbar">
                    <input name="search" type="search" placeholder="Which order are you looking for"
                           class="form-control border-0 bg-light" style="outline: none; border: 0;box-shadow: none">
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-link text-primary">
                            <!-- search icon -->
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                </div>
            </form>
            <br>

            <!--order-list-->
            <div class="table-responsive mt-4 table-hover">
                <table class="table">
                    <thead>
                    <tr class="row text-center">
                        <!-- thumbnail -->
                        <th class="col-1">#</th>
                        <th class="col-5">Items</th>
                        <th class="col-1">Price</th>
                        <th class="col-2">Creation Time</th>
                        <th class="col-1">Status</th>
                        <th class="col-2">Tracking Number</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for pack in package_list %}
                        <tr class="row text-center">
                            <td class="col-1 align-self-center border-top-0">{{ forloop.counter }}</td>
                            <td class="col-5 align-self-center border-top-0 text-left">
                                {% for key, value in item_dict.items %}
                                    {% if key is pack.id %}
                                        {% for order in value %}
                                            {% if forloop.counter < 4 %}
                                                <img class="img-thumbnail" style="width: 50px; height: 50px"
                                                     src="{{ order.item.img }}">
                                                <span style="font-size:14.5px;">{{ order.item.description }}</span>
                                            {% endif %}
                                        {% endfor %}
                                    {% endif %}
                                {% endfor %}
                            </td>
                            <td class="col-1 align-self-center border-top-0">
                                &dollar;{{ pack.total_fixed|floatformat:2 }}</td>
                            <td class="col-2 align-self-center border-top-0">{{ pack.creation_time|date:"F d, Y" }}</td>
                            <td class="col-1 align-self-center border-top-0">{{ pack.status }}</td>
                            <td class="col-2 align-self-center border-top-0">{{ pack.id }}</td>
                        </tr>
                        <tr class="row border-bottom">
                            <td class="col-10 border-top-0"></td>
                            <td class="col-1 border-top-0">
                                <a href="/listpackage/{{ pack.id }}/" class="btn btn-outline-info">Detail</a>
                            </td>
                            <td class="col-1 border-top-0">
                                <a href="{% url 'delete-package' pack.id %}"
                                   class="btn btn-outline-secondary">Delete</a>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        {% else %}
            <h4 class="m-4">No order found,
                <a href="{% url 'home' %}">buy something TODAY!</a>
            </h4>
        {% endif %}
    </div>

{% endblock content %}
--- File: ./amazon/templates/amazon/item_management.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>Item management</h1>
    <!-- order list -->
    {% if items %}
        <div class="table-responsive mt-4 table-hover">
            <table class="table">
                <thead>
                <tr class="row text-center">
                    <th class="col-1">#</th>
                    <!-- thumbnail + description -->
                    <th class="col-5 text-left">Item</th>
                    <th class="col-2">Price</th>
                    <th class="col-1">Status</th>
                    <!-- delete button -->
                    <th class="col-3">Action</th>
                </tr>
                </thead>
                <tbody>
                {% for item in items %}
                    <tr class="row text-center border-bottom">
                        <td class="col-1 align-self-center border-top-0">
                            <label class="col-form-label"> {{ forloop.counter }}</label>
                        </td>
                        <td class="col-5 text-left border-top-0">
                            <img class="img-thumbnail" style="width: 50px; height: 50px" src="{{ item.img }}">
                            {{ item.description }}
                        </td>
                        <td class="col-2 align-self-center border-top-0">
                            &dollar; {{ item.price|floatformat:2 }}
                        </td>
                        <td class="col-1 align-self-center border-top-0">
                            <span id="item_status">
                                {% if item.on_sell %}
                                    selling
                                {% else %}
                                    removed
                                {% endif %}
                            </span>
                        </td>
                        <td class="col-3 align-self-center border-top-0">
                            <a href="{% url "add_update_item" item.id %}" class="btn btn-primary" style="color: white">
                                Edit
                            </a>
                            <button id="bt_delete_{{ item.id }}" onclick="delete_item({{ item.id }})" class="btn btn-outline-secondary">
                                {% if item.on_sell %}
                                Delete
                                {% else %}
                                Sell
                                {% endif %}
                            </button>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
            <div class="text-right">
                <a href="{% url "add_update_item" "-1" %}" class="btn btn-primary" style="color: white"><i
                        class="fa fa-plus"></i>
                    Add more</a>
            </div>
        </div>
    {% else %}
        <h4 class="m-4">Nothing you are selling,
            <a href="{% url "add_update_item" "-1" %}">publish your first item today!</a>
        </h4>
    {% endif %}
{% endblock content %}

<!-- javascript -->
{% block script %}
    <script type="text/javascript">
        function delete_item(item_id) {
            const config = {
                "url": "{% url "delete_item" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": {
                    "item_id": item_id,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                "success": function (result) {
                    $("#bt_delete_" + item_id).text(result["action"]);
                    $("#item_status").text(result["status"]);
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }

        function add_operation_type(element, type) {
            const operation_field = document.createElement("input");
            operation_field.type = "hidden"
            operation_field.name = "operation"
            operation_field.value = type
            element.appendChild(operation_field)
        }
    </script>
{% endblock script %}
--- File: ./amazon/templates/amazon/checkout.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>Checkout</h1>
    <div class="row">
        <div class="col-md-8 order-md-1">
            <form class="needs-validation" novalidate action="{% url "checkout" package.id %}" method="post">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="ups_name">UPS Account Name <span class="text-muted">(Optional)</span></label>
                    <input type="text" class="form-control" id="ups_name" name="ups_name" placeholder="admin"
                           value=
                                   {% if user.profile.ups_name %}
                                       {{ user.profile.ups_name }}
                                   {% else %}
                                       ""
                                   {% endif %}>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="ups" name="checkbox"
                               id="checkbox_ups_name" checked>
                        <label class="form-check-label" for="checkbox_ups_name">save to profile</label>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="address">Address</label>
                    <div class="row">
                        <div class="input-group col-md-6">
                            <div class="input-group-prepend">
                                <label for="x" class="input-group-text">X: </label>
                            </div>
                            <input type="number" min=0 max=150 class="form-control" name="x" placeholder="x coordinate"
                                   id="x" required value=
                                           {% if user.profile.default_x != -1 %}
                                               {{ user.profile.default_x }}
                                           {% endif %}>
                            <div class="invalid-feedback" style="width: 100%;">
                                X value is required.
                            </div>
                        </div>

                        <div class="input-group col-md-6">
                            <div class="input-group-prepend">
                                <label for="y" class="input-group-text">Y: </label>
                            </div>
                            <input type="number" min=0 max=150 class="form-control" id="y" name="y"
                                   placeholder="y coordinate" required value=
                                           {% if user.profile.default_y != -1 %}
                                               {{ user.profile.default_y }}
                                           {% endif %}>
                            <div class="invalid-feedback" style="width: 100%;">
                                Y value is required.
                            </div>
                        </div>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="address" name="checkbox"
                               id="checkbox_address" checked>
                        <label class="form-check-label" for="checkbox_address">save to profile</label>
                    </div>
                </div>

                <hr class="mb-4">

                <h4 class="mb-3">Payment</h4>

                <div class="d-block my-3">
                    <div class="custom-control custom-radio">
                        <input id="credit" name="paymentMethod" type="radio" class="custom-control-input" checked=""
                               required>
                        <label class="custom-control-label" for="credit">Credit card</label>
                    </div>
                    <div class="custom-control custom-radio">
                        <input id="debit" name="paymentMethod" type="radio" class="custom-control-input" required>
                        <label class="custom-control-label" for="debit">Debit card</label>
                    </div>
                    <div class="custom-control custom-radio">
                        <input id="paypal" name="paymentMethod" type="radio" class="custom-control-input" required>
                        <label class="custom-control-label" for="paypal">PayPal</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="cc-name">Name on card</label>
                        <input type="text" class="form-control" id="cc-name" placeholder="" required="" value="ece568">
                        <small class="text-muted">Full name as displayed on card</small>
                        <div class="invalid-feedback">
                            Name on card is required
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="cc-number">Credit card number</label>
                        <input type="text" class="form-control" id="cc-number" placeholder="" required="" value="12345">
                        <div class="invalid-feedback">
                            Credit card number is required
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label for="cc-expiration">Expiration</label>
                        <input type="text" class="form-control" id="cc-expiration" placeholder="" required=""
                               value="08/23">
                        <div class="invalid-feedback">
                            Expiration date required
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="cc-cvv">CVV</label>
                        <input type="text" class="form-control" id="cc-cvv" placeholder="" required="" value="123">
                        <div class="invalid-feedback">
                            Security code required
                        </div>
                    </div>
                </div>
                <hr class="mb-4">
                <button class="btn btn-primary btn-lg btn-block" type="submit">Place your order</button>
            </form>
        </div>

        <!-- side bar, show package info -->
        <div class="col-md-4 order-md-2">
            <ul class="list-group mb-3">
                {% for my_order in package.orders.all %}
                    <li class="list-group-item d-flex justify-content-between lh-condensed">
                        <div>
                            <h6 class="my-0">{{ my_order.item.description }}</h6>
                            <small class="text-muted">Qty: {{ my_order.item_cnt }}</small>
                            <small class="text-muted">Price: &dollar; {{ my_order.item_price|floatformat:2 }}</small>
                        </div>
                        <span class="text-muted">&dollar; {{ my_order.total|floatformat:2 }}</span>
                    </li>
                {% endfor %}
                <li class="list-group-item d-flex justify-content-between">
                    <span>Total (USD)</span>
                    <strong>&dollar; {{ total|floatformat:2 }}</strong>
                </li>
            </ul>
        </div>
    </div>
{% endblock content %}


--- File: ./amazon/templates/amazon/item_detail.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <!--
    NOTE:
    we only consider medium size, aka "md"
    mb: margin bottom
    pb: padding bottom
    order: make the order of each element in a row(smaller to larger)
    -->
    <div class="row">
        <h1>{{ item.description }}</h1>
    </div>
    <div class="row mt-4">
        <!-- item image -->
        <div class="col-md-4 order-md-1 align-content-center">
            <!-- make it responsive, so it won't be larger than parent -->
            <img src="{{ item.img }}" class="img-fluid mt-2" alt="item image" style="width: 100%; height: auto">
        </div>
        <!-- item description + price -->
        <div class="col-md-4 order-md-2">
            <p class="text-md-left mt-4" style="font-size: x-large">
                Price:
                <span style="color: red; "> ${{ item.price|floatformat:2 }}</span>
                <span style="font-size: medium">
                &
                <b>Free shipping</b>
                </span>
            </p>
            <p class="text-md-left mt-4" style="font-size: xx-large">
                <b>BUY IT NOW!!!</b>
            </p>
        </div>
        <!-- "buy" & "add to cart" option -->
        <div class="col-md-4 order-md-3">
            <div class="p-2" style="border: 1px solid #7bc27a; height: auto">
                <div class="m-2">
                    <span style="color: red"> ${{ item.price|floatformat:2 }} </span>
                </div>
                <div class="m-2">
                    <b>& free shipping</b>
                </div>
                <div class="m-2">
                    Arrives: <b>Tomorrow</b>
                </div>

                <form name="item_form" class="card p-2 ml-2 mt-3" method="POST" onsubmit="return validForm();">
                    {% csrf_token %}
                    <input type="number" name="count" min="1" max="999" class="form-control" placeholder="Qty" required>
                    <button name="action" value="buy" class="btn btn-primary mt-3">Buy Now</button>
                    <button name="action" value="add" class="btn btn-secondary mt-3">Add to cart</button>
                </form>
            </div>
        </div>
    </div>
{% endblock content %}

{% block script %}
    <script type="text/javascript">
        function validForm() {
            if ("{{ item.seller.username }}" === "{{ user.get_username }}") {
                alert("You can't buy your own item.");
                return false
            } else {
                return true;
            }
        }
    </script>
{% endblock script %}

--- File: ./amazon/templates/amazon/list_package_detail.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <div class="col-md-11 row">
        <a href="/listpackage/" style="font-size:18px;">&nbsp;&nbsp;&nbsp;Your Orders >>&nbsp;</a>
        <p style="font-size:18px;">Order Details</p>
    </div>

    <!--order info-->
    <div class="content-section">
        <h4 style="margin-top: 16px">&nbsp;&nbsp;Order Info</h4>
        <br>
        <div class="row ">
            <div class="col-2 text-center ">
                <h4 style="font-size:16px; margin-bottom: 7px;">Order Status</h4>
                <p style=" font-size:15px; ">{{ pack.status|title }}</p>
            </div>
            <div class="col-4 text-center">
                <h4 style="font-size:16px; margin-bottom: 7px;">Order Time</h4>
                <p style="font-size:15px; ">{{ pack.creation_time }}</p>
            </div>
            <div class="col-2 text-center">
                <h5 style="font-size:16px; margin-bottom: 7px;">Shipping Address</h5>
                <p style="font-size:15px; "> ({{ pack.dest_x }}, {{ pack.dest_y }})</p>
            </div>
            <div class="col-2 text-center">
                <h5 style="font-size:16px; margin-bottom: 7px;">Tracking Number</h5>
                <p style="font-size:15px; ">{{ pack.id }}</p>
            </div>
            <div class="col-2 text-center">
                <h4 style="font-size:16px; margin-bottom: 7px;">Total Price</h4>
                <p style="font-size:15px; ">&dollar;{{ pack.total|floatformat:2 }}</p>
            </div>
        </div>
    </div>

    <!--item details-->
    <div class="content-section table-responsive border-bottom table-hover">
        <br>
        <h4>&nbsp;&nbsp;Item Details</h4>
        <br>
        {% if product_list %}
            <table class="table">
                <thead>
                <tr class="row text-center">
                    <th class="col-2">#</th>
                    <th class="col-6">Item</th>
                    <th class="col-2">Count</th>
                    <th class="col-2">Total Price</th>
                </tr>
                </thead>
                <tbody>
                {% for prod in product_list %}
                    <tr class="row align-items-center table-borderless">
                        <td class="col-2 text-center">{{ forloop.counter }}</td>
                        <td class="col-3 text-center">
                            <img class="img-thumbnail" style="width: 120px; height: 120px" src="{{ prod.item.img }}">
                        </td>
                        <td class="col-3 text-center">
                            <p style="font-size:17px;">{{ prod.item.description }}</p>
                            <p style="color:#aeb3b9; font-size:15px; margin-bottom: 10px;">
                                &dollar; {{ prod.item.price|floatformat:2 }} each</p>
                        </td>
                        <td class="col-2 text-center">{{ prod.item_cnt }}</td>
                        <td class="col-2 text-center">&dollar; {{ prod.total|floatformat:2 }}</td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        {% endif %}

        <div class="col-3 offset-9 text-right mt-4 mb-4">
            <b>Total(all items): </b><span style="color: #080000">&dollar;{{ pack.total|floatformat:2 }}</span>
        </div>

    </div>
{% endblock content %}

--- File: ./amazon/templates/amazon/success.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <!-- success page, show success info -->
    {% if is_add_cart %}
        <h1>{{ info }}</h1>
        <h2 class="mt-4"><a href="{% url "shop_cart" %}">My cart</a></h2>
    {% elif is_checkout %}
        <h1>{{ info }}</h1>
        <h2 class="mt-4"><a href="{% url "list-package" %}">My order</a></h2>
    {% elif is_add_item %}
        <h1>{{ info }}</h1>
        <h2 class="mt-4"><a href="{% url "add_update_item" "-1" %}">Add more</a></h2>
        <h2 class="mt-4"><a href="{% url "item_management" %}">Go to my selling page</a></h2>
    {% else %}
        <h1>Succeed!</h1>
    {% endif %}
    <h2 class="mt-4"><a href="{% url "home" %}">Buy more</a></h2>
{% endblock content %}
--- File: ./amazon/templates/amazon/item_add_update.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>
        {% if item %}
            Edit Product
        {% else %}
            Add Product
        {% endif %}
    </h1>
    <form name="item_form" action="{% url "add_update_item" "-1" %}" method="POST" enctype="multipart/form-data"
          class="needs-validation" novalidate>
        {% csrf_token %}
        <input type="hidden" name="item_id" value="{% if item %} {{ item.id }} {% else %} -1 {% endif %}">
        <div class="row">
            <div class="col-md-8 order-md-1">

                <div class="input-group mt-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Description:</span>
                    </div>
                    <input id="description" type="text" class="form-control" name="description" placeholder="e.g. apple"
                           required>
                    <div class="invalid-feedback" style="width: 100%;">
                        description is required
                    </div>
                </div>

                <div class="input-group mt-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Price:</span>
                    </div>
                    <input id="price" type="number" class="form-control" name="price" placeholder="e.g. 1.99"
                           step="0.01" required>
                    <div class="input-group-append">
                        <span class="input-group-text">&dollar;</span>
                    </div>
                    <div class="invalid-feedback" style="width: 100%;">
                        price is required
                    </div>
                </div>

                <div class="input-group mt-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <label for="category" class="form-check-label">Category:</label>
                        </span>
                    </div>
                    <select id="category" name="category" class="form-control" onchange="select(this)">
                        {% for c in categories %}
                            <option value="{{ c.category }}">{{ c.category }}</option>
                        {% endfor %}
                        <option value="">create a new one</option>
                    </select>
                </div>

                <hr class="mb-4">
                <button id="bt_submit" class="btn btn-primary btn-lg btn-block" type="submit">Add Item</button>
            </div>

            <!-- side bar, upload image -->
            <div class="col-md-4 order-md-2">
                <label for="img_preview" class="col-form-label">Preview: </label>
                <img id="img_preview" class="img-thumbnail col-md-10 offset-1 mb-4"
                     src="/static/img/sample.jpg" alt="preview"/>

                <!-- for convenience, don't allow seller to change image -->
                {% if not item %}
                    <div class="input-group">
                        <div class="custom-file input-group">
                            <input id="img" type="file" accept="image/jpg,image/jpeg" class="custom-file-input" name="thumbnail"
                                   onchange="preview()" required>
                            <label id="img_label" class="custom-file-label">Choose image</label>
                            <div class="invalid-feedback" style="width: 100%;">
                                please upload a thumbnail
                            </div>
                        </div>
                    </div>
                {% endif %}
            </div>
        </div>

    </form>
{% endblock content %}

{% block script %}
    <script type="text/javascript">
        // preview the image file just upload
        function preview() {
            const input = document.getElementById("img");
            const preview = document.getElementById("img_preview");
            const label = document.getElementById("img_label");
            preview.src = URL.createObjectURL(input.files[0]);
            label.innerText = input.files[0].name;
            preview.onload = function () {
                URL.revokeObjectURL(preview.src);
            }
        }

        // add new category
        function select(selection) {
            if (selection.value === "") {
                const category = prompt("Please input the new category", "");
                console.debug(category);
                if (category) {
                    const option = document.createElement("option");
                    option.value = category;
                    option.text = category;
                    selection.add(option, 0);
                    option.selected = true;
                }
            }
        }

        // set the value of each field if applicable
        $(function () {
            {% if item %}
                $("#description").val("{{ item.description }}").change();
                $("#price").val({{ item.price }});
                $("#category").val("{{ item.category }}");
                $("#img_preview").attr("src", "{{ item.img }}");
                $("#bt_submit").text("Save");
            {% endif %}
        });

        $("#description").change(function () {
            check_duplicate($(this).val())
        });

        // check whether an item is already existed
        function check_duplicate(description) {
            const config = {
                "url": "{% url "check_item" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": {
                    "item_id":
                        {% if item %}
                            "{{ item.id }}"
                        {% else %}
                            "-1"
                        {% endif %},
                    "item_description": description,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                "success": function (result) {
                    if (result["exist"]) {
                        $("#description").val("")
                        alert("the item already exist")
                    }
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }
    </script>
{% endblock script %}

--- File: ./amazon/tests.py ---
from django.test import TestCase

# Create your tests here.

--- File: ./amazon/urls.py ---
from django.urls import path

from . import views

urlpatterns = [
    # home page(list items)
    path('', views.home, name="home"),
    # category in home page
    path('category/<category>', views.home_category, name="home_category"),

    path('seller/<int:seller_id>', views.home_seller, name="home_seller"),
    # item detail page
    path('item/<int:item_id>', views.item_detail, name="item_detail"),
    # checkout page
    path('checkout/<int:package_id>', views.checkout, name="checkout"),
    # shopping cart page
    path('shopcart', views.shop_cart, name="shop_cart"),
    # add new item page
    path('add_update_item/<item_id>', views.add_update_item, name="add_update_item"),
    # item management page for seller
    path('item_management', views.item_management, name="item_management"),

    # api for change cnt in shopping cart
    path('change_cnt', views.change_cnt, name="change_cnt"),
    # api for check whether an item is already exist
    path('check_item', views.check_item, name="check_item"),
    # api for delete item
    path('delete_item', views.delete_item, name="delete_item"),

    # list_package page
    path('listpackage/', views.list_package, name='list-package'),
    # list_package_detail page
    path('listpackage/<int:package_id>/', views.list_package_detail, name='list-package-detail'),
    # list_package_detail page
    path('deletepackage/<int:package_id>', views.delete_package, name='delete-package'),
]

--- File: ./amazon/views.py ---
from django.shortcuts import render, redirect
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, Http404
from amazon.utils import *

from .models import *
from .utils import purchase

def home(request):
    context = {}
    items = Item.objects.filter(on_sell=True).order_by("id")
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context["items"] = items
    context["categories"] = Category.objects.all()
    context["category"] = "All"
    
    if request.user.is_authenticated:
        context["cart_count"] = Order.objects.filter(owner=request.user, package__isnull=True).count()
    else:
        context["cart_count"] = 0

    return render(request, "amazon/home.html", context)

# Home page, but with specific category
def home_category(request, category):
    category = Category.objects.get(category=category)
    items = Item.objects.filter(category=category).order_by("id").all()
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context = {
        "items": items,
        "categories": Category.objects.all(),
        "category": category
    }
    return render(request, "amazon/home.html", context)


def home_seller(request, seller_id):
    seller = User.objects.get(pk=seller_id)
    items = Item.objects.filter(seller=seller).order_by("id").all()
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context = {
        "items": items,
        "seller_name": seller.username
    }
    return render(request, "amazon/home.html", context)


# Item detail page, used to show the detail info of one specific item.
def item_detail(request, item_id):
    item = Item.objects.get(pk=item_id)
    context = {}
    if request.method == "POST":
        if not request.user.is_authenticated:
            return redirect(reverse("login"))
        cnt = int(request.POST["count"])
        if request.POST["action"] == "buy":
            # create a new package
            package = Package(owner=request.user)
            package.save()
            package.orders.create(
                owner=request.user,
                item=item,
                item_cnt=cnt
            )
            return redirect(reverse("checkout", kwargs={'package_id': package.id}))
        else:
            try:
                # try to get an existing order
                exist_order = Order.objects.get(owner=request.user, item=item, package__isnull=True)
                exist_order.item_cnt += cnt
                exist_order.save()
            except Order.DoesNotExist:
                # create a new order
                order = Order(owner=request.user, item=item, item_cnt=cnt)
                order.save()
            context["info"] = "Successfully add to cart."
            context["is_add_cart"] = True
            return render(request, "amazon/success.html", context)
    else:
        context["item"] = item
        return render(request, "amazon/item_detail.html", context)


@login_required
def checkout(request, package_id):
    package = Package.objects.get(pk=package_id)
    context = {}
    # actually checkout
    if request.method == "POST":
        x = int(request.POST["x"])
        y = int(request.POST["y"])
        ups_name = ""
        if "ups_name" in request.POST.keys():
            ups_name = request.POST["ups_name"]
        # save the value into profile
        checked = request.POST.getlist("checkbox")
        if "ups" in checked:
            request.user.profile.ups_name = ups_name
        if "address" in checked:
            request.user.profile.default_x = x
            request.user.profile.default_y = y
        request.user.save()
        package.dest_x = x
        package.dest_y = y
        package.ups_name = ups_name
        package.warehouse = cal_warehouse(x, y)
        package.save()
        print("deliver to: " + str(package.dest_x) + "  " + str(package.dest_y))
        context["info"] = "Purchase successful."
        context["is_checkout"] = True
        # once user checkout, the price will be final price
        for order in package.orders.all():
            order.item_price = order.item.price
            order.save()
        # send the purchase request to daemon
        purchase(package.id)
        send_email_async([request.user.email], package.info_str())
        return render(request, "amazon/success.html", context)
    else:
        context["total"] = package.total()
        context["package"] = package
        return render(request, "amazon/checkout.html", context)


@login_required
def shop_cart(request):
    orders = Order.objects.filter(owner=request.user).filter(package__isnull=True).order_by("creation_time")
    if request.method == 'POST':
        operation = request.POST["operation"]
        # user delete some order
        if operation == "delete":
            oid = request.POST["order_id"]
            orders.get(pk=oid).delete()
        elif operation == "checkout":
            # get all checked orders
            checked_orders = request.POST.getlist("checked_orders")
            print(checked_orders)
            # will only create a new package when at least one order is chosen
            if len(checked_orders) > 0:
                pack = Package(owner=request.user, warehouse=1)
                pack.save()
                for o in checked_orders:
                    print(orders.get(pk=int(o)))
                    pack.orders.add(orders.get(pk=int(o)))
                return redirect(reverse("checkout", kwargs={'package_id': pack.id}))
        # api for calculating the total price
        elif operation == "cal_total" and request.is_ajax():
            checked_orders = request.POST.getlist("checked_orders")
            total = 0.0
            for o in checked_orders:
                total += orders.get(pk=o).total()
            return JsonResponse({"total_cart": ("%.2f" % total)})
    total = 0
    for o in orders:
        total += o.total()
    context = {"orders": orders, "total": total}
    return render(request, "amazon/shopping_cart.html", context)


@login_required
def list_package(request):
    package_list = Package.objects.filter(owner=request.user).order_by('creation_time').all()
    item_dict = {}

    if request.method == "POST":
        search = request.POST["search"]
        search_list = []
        for pack in package_list:
            orders = Order.objects.filter(package__id=pack.id, item__description__icontains=search)
            if orders:
                search_list.append(pack)
        package_list = search_list

    for pack in package_list:
        orders = Order.objects.filter(package__id=pack.id)
        item_dict[pack.id] = orders

    context = {
        'package_list': package_list,
        'item_dict': item_dict,
    }
    return render(request, 'amazon/list_package.html', context)


@login_required
def delete_package(request, package_id):
    Package.objects.get(owner=request.user, id=package_id).delete()
    return HttpResponseRedirect(reverse('list-package'))


@login_required
def list_package_detail(request, package_id):
    context = {
        'product_list': Order.objects.filter(package__id=package_id),
        'pack': Package.objects.get(owner=request.user, id=package_id),
    }
    return render(request, 'amazon/list_package_detail.html', context)


""" ====== Below are functions for seller ====== """


@login_required
def item_management(request):
    items = Item.objects.filter(seller=request.user).all()
    context = {"items": items}
    return render(request, "amazon/item_management.html", context)


@login_required
def add_update_item(request, item_id):
    if not request.user.profile.is_seller:
        raise Http404("Your are not a seller")
    if request.method == "POST":
        # if the method is POST, we should use the id in POST data rather than URL
        item = request.POST["item_id"]
        description = request.POST["description"]
        price = float(request.POST["price"])
        category = request.POST.getlist("category")[0]
        # check whether it's a new category
        try:
            c = Category.objects.get(category=category)
        except Category.DoesNotExist:
            c = Category(category=category)
            c.save()
        if int(item) == -1:
            p = request.FILES["thumbnail"]
            img_name = description.replace(" ", "_") + "_" + request.user.username + "." + p.name.split(".")[1]
            save_img(img_name, p)
            # new item
            new_item = Item(
                description=description,
                price=price,
                category=c,
                img="/static/img/" + img_name,
                seller=request.user
            )
            new_item.save()
            context = {"is_add_item": True, "info": "Successful add the item."}
            return render(request, "amazon/success.html", context)
        else:
            # existing item
            old_item = Item.objects.get(pk=item)
            old_item.description = description
            old_item.price = price
            old_item.category = c
            old_item.save()
            return redirect(reverse("item_management"))

    context = {}
    categories = Category.objects.all()
    context["categories"] = categories
    if item_id != "-1":
        context["item"] = Item.objects.get(pk=int(item_id))
    return render(request, "amazon/item_add_update.html", context)


""" ====== Below are some ajax api ====== """


# ajax api for changing item count in the shopping cart
@login_required
def change_cnt(request):
    if request.is_ajax() and request.method == "POST":
        order_id = request.POST["order_id"]
        operation = request.POST["operation"]
        total_cart = float(request.POST["total_cart"])
        order = Order.objects.get(pk=order_id)
        # lower and upper limit --- 1 ~ 99
        if operation == "add" and order.item_cnt < 99:
            order.item_cnt += 1
            order.save()
            total_cart += order.item.price
        elif operation == "minus" and order.item_cnt > 1:
            order.item_cnt -= 1
            order.save()
            total_cart -= order.item.price
        data = {
            # latest count
            "cnt": order.item_cnt,
            # total price for the order
            "total_order": ("%.2f" % order.total()),
            # total price for all
            "total_cart": ("%.2f" % total_cart)
        }
        return JsonResponse(data)
    return JsonResponse({})


# check whether an item has already exist
@login_required
def check_item(request):
    if request.is_ajax() and request.method == "POST":
        new_item = request.POST["item_description"]
        item_id = request.POST["item_id"]
        try:
            # valid, as long as the item name has no duplication within current seller
            Item.objects.exclude(pk=int(item_id)).filter(seller=request.user).get(description=new_item)
            data = {"exist": True}
        except Item.DoesNotExist:
            data = {"exist": False}
        return JsonResponse(data)
    return JsonResponse({})


@login_required
def delete_item(request):
    if request.is_ajax() and request.method == "POST":
        item_id = request.POST["item_id"]
        data = {}
        item = Item.objects.get(pk=int(item_id))
        if item.on_sell:
            item.on_sell = False
            data["status"] = "removed"
            data["action"] = "Sell"
        else:
            item.on_sell = True
            data["status"] = "selling"
            data["action"] = "Delete"
        item.save()
        return JsonResponse(data)
    return JsonResponse({})
./users/

--- File: ./users/signals.py ---
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import Profile


@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_profile(sender, instance, **kwargs):
    instance.profile.save()
./users/migrations/

--- File: ./users/migrations/__init__.py ---
./users/migrations/__pycache__/

--- File: ./users/migrations/0001_initial.py ---
# Generated by Django 3.1.8 on 2025-04-24 20:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='auth.user')),
                ('is_seller', models.BooleanField(default=False)),
                ('ups_name', models.CharField(blank=True, default='', max_length=50)),
                ('default_x', models.IntegerField(blank=True, default=-1)),
                ('default_y', models.IntegerField(blank=True, default=-1)),
            ],
        ),
    ]

--- File: ./users/models.py ---
from django.db import models
from django.contrib.auth.models import User


class Profile(models.Model):
    user = models.OneToOneField(User, primary_key=True, on_delete=models.CASCADE)
    is_seller = models.BooleanField(default=False)
    ups_name = models.CharField(max_length=50, default="", blank=True)
    default_x = models.IntegerField(default=-1, blank=True)
    default_y = models.IntegerField(default=-1, blank=True)

    def __str__(self):
        return f'{self.user.username} Profile'

--- File: ./users/__init__.py ---
./users/__pycache__/

--- File: ./users/apps.py ---
from django.apps import AppConfig


class UsersConfig(AppConfig):
    name = 'users'

    def ready(self):
        import users.signals
--- File: ./users/forms.py ---
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import Profile


class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']


class UserUpdateForm(forms.ModelForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email']


class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['is_seller']

--- File: ./users/admin.py ---
from django.contrib import admin

# Register your models here.

--- File: ./users/utils.py ---
from django.contrib.auth.models import User
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError


def check_username(username, user):
    if " " in username:
        return ["username contains space"]
    if username != user.username:
        try:
            User.objects.get(username=username)
            return ["this name has already been used"]
        except User.DoesNotExist:
            return []
    return []


def check_password(old_p, new_p, user):
    # check old password
    if not user.check_password(old_p):
        return ["old password not match"]
    # check whether is the same
    if old_p == new_p:
        return ["old and new password are the same"]
    # check new password
    try:
        validate_password(new_p)
    except ValidationError as e:
        errors = []
        for error in e.error_list:
            errors.extend(error.messages)
        return errors
    return []

./users/templates/
./users/templates/users/

--- File: ./users/templates/users/profile.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <div class="content-section">
        <div class="media">
            <div class="media-body card-header" style="border-bottom: 0;">
                <h2 class="account-heading">{{ user.username }}</h2>
                <div class="row" style="margin: 0;">
                    <label class="text-secondary col-3" style="padding: 0;">{{ user.email }}</label>
                    <label class="text-secondary col-3" style="padding: 0;">
                        is seller:
                        {% if user.profile.is_seller %}
                            Yes
                        {% else %}
                            No
                        {% endif %}
                    </label>
                </div>
            </div>
        </div>

        <!-- form for update profile(e.g. name + email) -->
        <form method="POST" style="overflow: hidden;" class="mt-4">
            {% csrf_token %}

            <legend class="border-bottom">Profile</legend>
            <input type="hidden" name="operation" value="update_profile">
            <div class="row mt-4">
                <div class="input-group col-md-6">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="username">Username: </label>
                    </div>
                    <input type="text" class="form-control" name="username" placeholder="username" required
                           value={{ username }} id="username">
                    <div class="invalid-feedback" style="width: 100%;">
                        username is required
                    </div>
                </div>

                <div class="input-group col-md-6">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="email">Email: </label>
                    </div>
                    <input type="text" class="form-control" name="email" placeholder="email" required
                           value={{ email }} id="email">
                    <div class="invalid-feedback" style="width: 100%;">
                        email is required
                    </div>
                </div>
            </div>

            <ul class="mt-2">
                <li>Your username can't contain space.</li>
                <li>Your username can't be duplicate with any other user.</li>
            </ul>

            {% if name_errors %}
                <span style="color: red">
                    <ul>
                    {% for error in name_errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                    </ul>
                </span>
            {% endif %}


            <button class="btn btn-outline-info pull-right mt-2" type="submit">Update</button>
        </form>

        <!-- form for update password -->
        <form method="POST" style="overflow: hidden;">
            {% csrf_token %}

            <legend class="border-bottom mt-2">Password</legend>
            <input type="hidden" name="operation" value="update_password">
            <div class="input-group mt-4">
                <div class="col-2" style="padding: 0;">
                    <div class="input-group-prepend">
                        <label class="input-group-text" style="width: 100%;">Old Password: </label>
                    </div>
                </div>
                <input type="password" class="form-control" name="old_password" placeholder="old password" required>
            </div>

            <div class="input-group mt-3">
                <div class="col-2" style="padding: 0;">
                    <div class="input-group-prepend">
                        <span class="input-group-text" style="width: 100%;">New Password: </span>
                    </div>
                </div>
                <input type="password" class="form-control" name="new_password" placeholder="new password" required>
            </div>
            <span class="input-group mt-2">
                {{ help_text }}
            </span>

            {% if password_errors %}
                <span style="color: red">
                    <ul>
                    {% for error in password_errors %}
                        <li>{{ error }}</li>
                    {% endfor %}
                    </ul>
                </span>
            {% endif %}

            <button class="btn btn-outline-info pull-right mt-2" type="submit">Update</button>
        </form>

        <!-- form for update optional info -->
        <form method="POST" style="overflow: hidden;">
            {% csrf_token %}

            <legend class="border-bottom mt-2">Optional Info</legend>
            <input type="hidden" name="operation" value="update_optional">

            <label class="mt-1">Default address</label>
            <div class="row">
                <div class="input-group col-md-6">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="default_x">X: </label>
                    </div>
                    <input type="number" class="form-control" name="default_x" placeholder="x coordinate"
                           id="default_x" value=
                                   {% if user.profile.default_x != -1 %}
                                       {{ user.profile.default_x }}
                                   {% endif %}>
                </div>

                <div class="input-group col-md-6">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="default_y">Y: </label>
                    </div>
                    <input type="number" class="form-control" name="default_y" placeholder="y coordinate"
                           id="default_y" value=
                                   {% if user.profile.default_y != -1 %}
                                       {{ user.profile.default_y }}
                                   {% endif %}>
                </div>
            </div>

            <div class="row mt-3">
                <div class="input-group col-md-6 mr-auto">
                    <div class="input-group-prepend">
                        <label class="input-group-text" for="username">UPS Account: </label>
                    </div>
                    <input type="text" class="form-control" name="ups_name" placeholder="ups account name"
                           value="{{ user.profile.ups_name }}" id="ups_name">
                </div>
            </div>

            <button class="btn btn-outline-info pull-right mt-2" type="submit">Update</button>
        </form>

        <!-- form for update seller info -->
        <form method="POST" style="overflow: hidden;">
            {% csrf_token %}

            <legend class="border-bottom mt-2">Seller Info</legend>
            <input type="hidden" name="operation" value="update_seller">

            <div class="form-check">
                <input class="form-check-input" type="checkbox" value="seller" name="register_seller"
                       id="register_seller"
                        {% if user.profile.is_seller %}
                       checked
                        {% endif %} >
                <label class="form-check-label" for="register_seller">Register as a seller</label>
            </div>

            <button class="btn btn-outline-info pull-right mt-2" type="submit">Update</button>
        </form>

    </div>
{% endblock content %}

{% block script %}
    <script type="text/javascript">
        // TODO: use ajax to validate input and show message
        // 1. show a message box when register successful
        function check_username() {
            return false;
        }

        function check_password() {
            return false;
        }

        // 2. show error message when password fail
    </script>
{% endblock script %}

--- File: ./users/templates/users/register.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST">
            {% csrf_token %}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Join Today</legend>
                {{ form.as_p }}
            </fieldset>
            <div class="form-group">
                <button class="btn btn-outline-info" type="submit">Sign Up</button>
            </div>
        </form>
        <div class="border-top pt-3">
            <small class="text-muted">
                Already Have An Account? <a class="ml-2" href="{% url 'login' %}">Login In</a>
            </small>
        </div>
    </div>
{% endblock content %}

--- File: ./users/templates/users/login.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <div class="content-section">
        <form method="POST">
            {% csrf_token %}
            <fieldset class="form-group">
                <legend class="border-bottom mb-4">Log In</legend>
                {{ form.as_p }}
            </fieldset>

            {% if messages %}
                <ul class="messages mb-4">
                    {% for message in messages %}
                        <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
                    {% endfor %}
                </ul>
            {% endif %}

            <div class="form-group">
                <button class="btn btn-outline-info" type="submit">Login</button>
            </div>
        </form>
        <div class="border-top pt-3">
            <small class="text-muted">
                Need An Account? <a class="ml-2" href="{% url 'register' %}">Sign Up Now</a>
            </small>
        </div>
    </div>
{% endblock content %}
--- File: ./users/templates/users/logout.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h2>You have been logged out</h2>
    <div class="border-top pt-3">
        <small class="text-muted">
            <a href="{% url 'login' %}">Log In Again</a>
        </small>
    </div>
{% endblock content %}
--- File: ./users/tests.py ---
from django.test import TestCase

# Create your tests here.

--- File: ./users/urls.py ---
from django.urls import path

from . import views

urlpatterns = [
   # path('register/', views.register, name="register"),
]

--- File: ./users/views.py ---
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.password_validation import password_validators_help_text_html
from django.shortcuts import render, redirect
from django.urls import reverse

from .forms import UserRegisterForm
from .utils import *


def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = UserRegisterForm()
    return render(request, 'users/register.html', {'form': form})


@login_required
def profile(request):
    context = {}
    user = request.user
    context["username"] = user.username
    context["email"] = user.email
    if request.method == 'POST':
        opera = request.POST["operation"]
        if opera == "update_profile":
            username = request.POST["username"]
            email = request.POST["email"]
            context["username"] = username
            context["email"] = email
            errors = check_username(username, user)
            if len(errors) == 0:
                user.username = username
                user.email = email
                user.save()
            else:
                context["name_errors"] = errors
        elif opera == "update_password":
            old_p = request.POST["old_password"]
            new_p = request.POST["new_password"]
            errors = check_password(old_p=old_p, new_p=new_p, user=user)
            if len(errors) == 0:
                user.set_password(new_p)
                user.save()
                messages.success(request, "successfully change the password")
                return redirect(reverse("login"))
            else:
                context["password_errors"] = errors
        elif opera == "update_seller":
            c = request.POST.getlist("register_seller")
            if len(c) == 0:
                user.profile.is_seller = False
            else:
                user.profile.is_seller = True
            user.profile.save()
        elif opera == "update_optional":
            ups_name = request.POST["ups_name"]
            default_x = request.POST["default_x"]
            default_y = request.POST["default_y"]
            if len(default_x) > 0:
                default_x = int(default_x)
                user.profile.default_x = default_x
            else:
                user.profile.default_x = -1
            if len(default_y) > 0:
                default_y = int(default_y)
                user.profile.default_y = default_y
            else:
                user.profile.default_y = -1
            user.profile.ups_name = ups_name
            user.save()

    context["help_text"] = password_validators_help_text_html
    return render(request, 'users/profile.html', context)




--- File: ./manage.py ---
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
./ERSSHW5/

--- File: ./ERSSHW5/asgi.py ---
"""
ASGI config for ERSSHW5 project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')

application = get_asgi_application()

--- File: ./ERSSHW5/__init__.py ---
./ERSSHW5/__pycache__/

--- File: ./ERSSHW5/settings.py ---
"""
Django settings for ERSSHW5 project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%f5o45o!1jroha1d&oc!d9cbhu3*v&27!3eb@jh_e)!+^!6k3l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["web", "0.0.0.0", "127.0.0.1", 'vcm-12385.vm.duke.edu', 'localhost', 'vcm-13663.vm.duke.edu']


# Application definition

INSTALLED_APPS = [
    'amazon.apps.AmazonConfig',
    'users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ERSSHW5.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ERSSHW5.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'NAME': 'amazon',
          'PASSWORD': 'postgres',
          'USER': 'postgres',
          'HOST': 'db',
          'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'login'


--- File: ./ERSSHW5/urls.py ---
"""ERSSHW5 URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include

from users import views as user_views

urlpatterns = [
    path('admin/', admin.site.urls),
    # redirect all user related pages to user app(which should handle the authentication)
    path('users/', include('users.urls')),
    path('register/', user_views.register, name='register'),
    path('profile/', user_views.profile, name='profile'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'),
    # redirect all pages to amazon
    path('', include('amazon.urls'))
]

--- File: ./ERSSHW5/wsgi.py ---
"""
WSGI config for ERSSHW5 project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')

application = get_wsgi_application()
