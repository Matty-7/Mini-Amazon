=== PROJECT FILE STRUCTURE ===
  |  |  |-__init__.cpython-38.pyc
  |  |  |-admin.cpython-38.pyc
  |  |  |-apps.cpython-38.pyc
  |  |  |-models.cpython-38.pyc
  |  |  |-urls.cpython-38.pyc
  |  |  |-utils.cpython-38.pyc
  |  |  |-views.cpython-38.pyc
  |  |-admin.py
  |  |-apps.py
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-0001_initial.cpython-38.pyc
  |  |  |-0001_initial.py
  |  |-models.py
  |  |  |  |-main.css
  |  |  |  |-apple.jpg
  |  |  |  |-banner1.png
  |  |  |  |-banner2.png
  |  |  |  |-banner3.png
  |  |  |  |-fresh-logo.png
  |  |  |  |-fried_chicken.jpg
  |  |  |  |-ipad_mini.jpg
  |  |  |  |-ipad_pro.jpg
  |  |  |  |-ipad.jpg
  |  |  |  |-logo.png
  |  |  |  |-magic_keyboard.jpg
  |  |  |  |-orange.jpg
  |  |  |  |-sample.jpg
  |  |  |  |-jquery-3.5.0.min.js
  |  |  |  |-jquery.tablesorter.js
  |  |  |  |-base.html
  |  |  |  |-checkout.html
  |  |  |  |-home.html
  |  |  |  |-item_add_update.html
  |  |  |  |-item_detail.html
  |  |  |  |-item_management.html
  |  |  |  |-list_package_detail.html
  |  |  |  |-list_package.html
  |  |  |  |-shopping_cart.html
  |  |  |  |-success.html
  |  |-urls.py
  |  |-utils.py
  |  |-views.py
  |-Dockerfile
  |  |  |-__init__.cpython-38.pyc
  |  |  |-settings.cpython-38.pyc
  |  |  |-urls.cpython-38.pyc
  |  |  |-wsgi.cpython-38.pyc
  |  |-asgi.py
  |  |-settings.py
  |  |-urls.py
  |  |-wsgi.py
  |-initserver.sh
  |-manage.py
  |-output.txt
  |-print_all.sh
  |-requirements.txt
  |-runserver.sh
  |  |  |-__init__.cpython-38.pyc
  |  |  |-admin.cpython-38.pyc
  |  |  |-apps.cpython-38.pyc
  |  |  |-forms.cpython-38.pyc
  |  |  |-models.cpython-38.pyc
  |  |  |-signals.cpython-38.pyc
  |  |  |-urls.cpython-38.pyc
  |  |  |-utils.cpython-38.pyc
  |  |  |-views.cpython-38.pyc
  |  |-apps.py
  |  |-forms.py
  |  |  |-__init__.py
  |  |  |  |-__init__.cpython-38.pyc
  |  |  |  |-0001_initial.cpython-38.pyc
  |  |  |-0001_initial.py
  |  |-models.py
  |  |-signals.py
  |  |  |  |-login.html
  |  |  |  |-logout.html
  |  |  |  |-profile.html
  |  |  |  |-register.html
  |  |-urls.py
  |  |-utils.py
  |  |-views.py
  |-wait-for-it.sh


./
./amazon/
./amazon/migrations/

--- File: ./amazon/migrations/__init__.py ---
./amazon/migrations/__pycache__/

--- File: ./amazon/migrations/0001_initial.py ---
# Generated by Django 3.1.8 on 2025-04-25 03:02

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100)),
                ('price', models.FloatField(default=0.99)),
                ('img', models.CharField(default='/static/img/sample.jpg', max_length=50)),
                ('on_sell', models.BooleanField(default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='amazon.category')),
                ('seller', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WareHouse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x', models.IntegerField(default=1)),
                ('y', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('warehouse', models.IntegerField(default=1)),
                ('status', models.CharField(default='processing', max_length=100)),
                ('dest_x', models.IntegerField(default=10)),
                ('dest_y', models.IntegerField(default=10)),
                ('creation_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('ups_name', models.CharField(blank=True, default='', max_length=50)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packages', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_cnt', models.IntegerField(default=1)),
                ('item_price', models.FloatField(default=0.99)),
                ('creation_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='amazon.item')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('package', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='amazon.package')),
            ],
        ),
    ]

--- File: ./amazon/models.py ---
from django.contrib.auth.models import User
from django.db import models
from django.utils.timezone import now

class WareHouse(models.Model):
    x = models.IntegerField(default=1)
    y = models.IntegerField(default=1)

    def __str__(self):
        return "<" + str(self.x) + ", " + str(self.y) + ">"

class Category(models.Model):
    category = models.CharField(max_length=50, blank=False, null=False)

    def __str__(self):
        return self.category

class Item(models.Model):
    description = models.CharField(max_length=100, blank=False, null=False)
    price = models.FloatField(default=0.99, blank=False, null=False)
    img = models.CharField(max_length=50, default="/static/img/sample.jpg")
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    seller = models.ForeignKey(User, on_delete=models.SET_NULL, null=True)
    on_sell = models.BooleanField(default=True)

    def __str__(self):
        return self.description

class Package(models.Model):
    # user info
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="packages")
    # the warehouse id where this package stores
    warehouse = models.IntegerField(default=1)
    # the status of current package, possible value:
    # processing --- purchase but not receive the successful message
    # processed  --- purchase successful
    # packing    --- package arrived warehouse and is packing
    # packed     --- package is packed
    # loading    --- the truck arrived at warehouse and is loading
    # loaded     --- finish loading
    # delivering --- delivering to destination
    # delivered  --- delivered(final state of this package)
    # error      --- any error state(should follow by the actual error message, e.g. error: illegal item)
    status = models.CharField(max_length=100, default="processing")
    dest_x = models.IntegerField(default=10)
    dest_y = models.IntegerField(default=10)
    creation_time = models.DateTimeField(default=now)
    # associate ups account name for this package(optional)
    ups_name = models.CharField(max_length=50, default="", blank=True)

    def total(self):
        total = 0
        for order in self.orders.all():
            total += order.total()
        return total

    def total_fixed(self):
        total = 0
        for order in self.orders.all():
            total += order.total_fixed()
        return total

    def info_str(self):
        info = "Your order has successfully been placed.\nDetail info:\n"
        for order in self.orders.all():
            info += "* %d %s(total $ %.2f)\n" % (order.item_cnt, order.item.description, order.total_fixed())
        info += "total: $%.2f" % (self.total_fixed())
        return info

    def __str__(self):
        return "<" + str(self.warehouse) + ", " + self.status + ">"

# order = item id + item counts (+ item price)
class Order(models.Model):
    # user info
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
    item = models.ForeignKey(Item, on_delete=models.SET_NULL, null=True)
    item_cnt = models.IntegerField(default=1)
    item_price = models.FloatField(default=0.99)
    package = models.ForeignKey(Package, on_delete=models.CASCADE, related_name="orders", null=True, blank=True)
    creation_time = models.DateTimeField(default=now)

    # return the total price for current order
    def total(self):
        return self.item_cnt * self.item.price

    # return the total price for current order
    def total_fixed(self):
        return self.item_cnt * self.item_price

    def __str__(self):
        return "<" + str(self.package_id) + ", <" + str(self.item_id) + ', ' + str(self.item_cnt) + ">>"

./amazon/__pycache__/

--- File: ./amazon/apps.py ---
from django.apps import AppConfig
from django.db.models.signals import post_migrate


# This function will check whether there are default users, and will create two if not.
def default_users():
    from django.contrib.auth.models import User
    try:
        User.objects.get(username="Matty")
    except User.DoesNotExist:
        Matty = User.objects.create(
            username="Matty",
            email="Matty@noreply.com",
            is_superuser=False
        )
        Matty.set_password("Matty12345")
        Matty.profile.is_seller = True
        Matty.save()
    try:
        User.objects.get(username="Alex")
    except User.DoesNotExist:
        Alex = User.objects.create(
            username="Alex",
            email="Alex@noreply.com",
            is_superuser=False
        )
        Alex.set_password("Alex12345")
        Alex.profile.is_seller = True
        Alex.save()

# This function will check whether there are default category of products, and will create if not.
def default_category():
    from amazon.models import Category
    if Category.objects.all().count() == 0:
        Category.objects.create(category="fruit")
        Category.objects.create(category="food")
        Category.objects.create(category="electronic")


# This function will check whether there are default products, and will create if not.
def default_items():
    from django.contrib.auth.models import User
    from amazon.models import Item, Category
    if Item.objects.all().count() == 0:
        Matty = User.objects.get(username="Matty")
        Alex = User.objects.get(username="Alex")
        fruit = Category.objects.get(category="fruit")
        food = Category.objects.get(category="food")
        electronic = Category.objects.get(category="electronic")
        Item.objects.create(
            description="apple", price=1.99,
            img="/static/img/apple.jpg", category=fruit,
            seller=Alex
        )
        Item.objects.create(
            description="orange", price=0.99,
            img="/static/img/orange.jpg", category=fruit,
            seller=Alex
        )
        Item.objects.create(
            description="Fried Chicken", price=5.99,
            img="/static/img/fried_chicken.jpg", category=food,
            seller=Alex
        )
        Item.objects.create(
            description="iPad Mini", price=399.99,
            img="/static/img/ipad_mini.jpg", category=electronic,
            seller=Matty
        )
        Item.objects.create(
            description="iPad", price=429.99,
            img="/static/img/ipad.jpg", category=electronic,
            seller=Matty
        )
        Item.objects.create(
            description="iPad Pro", price=1099.99,
            img="/static/img/ipad_pro.jpg", category=electronic,
            seller=Matty
        )
        Item.objects.create(
            description="Magic Keyboard", price=129.99,
            img="/static/img/magic_keyboard.jpg", category=electronic,
            seller=Matty
        )


def default_warehouse():
    from amazon.models import WareHouse
    # create 10 warehouse
    for x, y in zip(range(10, 110, 10), range(10, 110, 10)):
        WareHouse.objects.create(x=x, y=y)


def migrate_callback(sender, **kwargs):
    default_users()
    default_category()
    default_items()
    default_warehouse()


class AmazonConfig(AppConfig):
    name = 'amazon'

    def ready(self):
        post_migrate.connect(migrate_callback, sender=self)

--- File: ./amazon/admin.py ---
from django.contrib import admin
from .models import Package, Order, Item

# Register your models here.
admin.site.register(Item)
admin.site.register(Package)
admin.site.register(Order)
--- File: ./amazon/utils.py ---
import socket
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from PIL import Image
from amazon.models import WareHouse
from concurrent.futures import ThreadPoolExecutor
import math

SMTP_SERVER = 'smtp.gmail.com:587'
USER_ACCOUNT = {
    'username': 'ece568noreply@gmail.com',
    'password': 'ece568code'
}
pool = ThreadPoolExecutor(10)

def send_email_async(receivers, text):
    pool.submit(send_email, receivers, text)


def send_email(receivers, text):
    msg_root = MIMEMultipart()
    msg_root['Subject'] = "Info from Our Mini Amazon"
    msg_root['To'] = ", ".join(receivers)
    msg_text = MIMEText(text)
    msg_root.attach(msg_text)

    smtp = smtplib.SMTP(SMTP_SERVER)
    smtp.starttls()
    smtp.login(USER_ACCOUNT["username"], USER_ACCOUNT["password"])
    smtp.sendmail(USER_ACCOUNT["username"], receivers, msg_root.as_string())
    smtp.quit()


def save_img(name, data):
    img = Image.open(data)
    img.save("/code/amazon/static/img/%s" % (name), "JPEG", optimize=1)

# calculate the nearest warehouse for the location
def cal_warehouse(x, y):
    whs = WareHouse.objects.all()
    min_id = 1
    min_dest = 65535
    for wh in whs:
        dest = math.sqrt(math.pow(wh.x - x, 2) + math.pow(wh.y - y, 2))
        if dest < min_dest:
            min_dest = dest
            min_id = wh.id
    return min_id

def purchase(package_id):
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # use port 8888 to communicate with daemon
    client.connect(('daemon', 8888))
    msg = str(package_id) + '\n'
    client.send(msg.encode('utf-8'))
    # expected response: ack:<package_id>
    data = client.recv(1024)
    data = data.decode()
    res = data.split(":")
    if res[0] == "ack" and res[1] == str(package_id):
        return True
    print('recv:', data)
    return False

if __name__ == '__main__':
    send_email_async(["mattyhuan7@gmail.com"], "hello")
./amazon/static/
./amazon/static/amazon/

--- File: ./amazon/static/amazon/main.css ---
/* Design Tokens - 设计系统变量 */
:root {
  --brand: #7bc27a;
  --brand-dark: #5f788a;
  --warn: #febd69;
  --amazon-orange: #ff9900;
  --accent: #007185;
  --text-primary: #131921;
  --text-secondary: #565959;
  --bg-light: #f3f3f3;
  --bg-dark: #131921;
  --bg-darker: #0f1111;
  --border-color: #d5d9d9;
  --border-radius: 0.75rem;
  --shadow: 0 4px 16px rgba(0,0,0,.1);
  --transition: all 0.2s ease-in-out;
}

/* Base reset and layout */
body {
    font-family: Arial, sans-serif;
    background-color: var(--bg-light);
    color: var(--text-primary);
    padding-top: 70px;
    margin: 0;
}

/* Headers */
h1, h2, h3, h4, h5, h6 {
    color: var(--text-primary);
    font-weight: 500;
}

/* Navbar & Header */
.site-header {
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 10;
    background-color: var(--bg-dark);
    box-shadow: var(--shadow);
}
.navbar-brand img {
    height: 36px;
}
.site-header .navbar-nav .nav-link {
    color: #ffffff !important;
    font-weight: 500;
    padding: 8px 16px;
}

.site-navbar {
    background-color: var(--bg-dark) !important;
}

.site-header .navbar-nav .nav-link:hover {
    color: #ffffff !important;
    background-color: #232f3e;
    border-radius: 4px;
}

/* Carousel Banner Gradient */
.banner-gradient-mask {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 300px;
    width: 100%;
    background: linear-gradient(to bottom, rgba(255,255,255,0) 0%, var(--bg-light) 100%);
    z-index: 1;
}

.small-section-card {
  background-color: #fff;
  border: 1px solid #e3e6e6;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
  height: 100%;
}


/* Amazon-style Category Wrapper */
.category-card {
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.06);
  padding: 16px 24px;
  margin-top: 24px;
  margin-bottom: 24px;
}

/* Adjusted Product Card (No zoom on hover) */
.product-card {
  min-width: 200px;
  max-width: 200px;
  border: none;
  border-radius: 12px;
  overflow: hidden;
  background-color: white;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}
.product-card img {
  width: 100%;
  height: 180px;
  object-fit: contain;
  background-color: #f7f7f7;
  padding: 10px;
}
.product-card .card-body {
  padding: 8px;
}
.product-card .card-title {
  font-size: 14px;
  font-weight: 600;
}
.product-card .card-text {
  font-size: 13px;
  font-weight: bold;
}



/* Product Image and Description */
.listitem a img {
    width: 100%;
    height: auto;
    max-height: 200px;
    object-fit: contain;
    display: block;
    margin: auto;
}
.listitem a p {
    color: var(--accent);
    font-size: 14px;
    text-align: center;
    margin: 10px 0;
}

/* Search bar */
.searchbar {
    border-radius: var(--border-radius);
    border: 1px solid var(--border-color);
    padding: 6px 12px;
    width: 100%;
}
.searchbar:hover {
    border: 2px solid var(--warn);
    transition: var(--transition);
}

/* Content sections */
.content-section {
    background: #ffffff;
    padding: 20px;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    margin-bottom: 20px;
}

/* Account page */
.account-img {
    height: 120px;
    width: 120px;
    margin-right: 20px;
    margin-bottom: 16px;
}
.account-heading {
    font-size: 2rem;
    color: var(--text-primary);
}

/* Scrollbar Styling */
.d-flex::-webkit-scrollbar {
    height: 6px;
}
.d-flex::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 3px;
}
.d-flex::-webkit-scrollbar-track {
    background-color: transparent;
}

  .card {
    border-radius: 12px;
    box-shadow: 0 4px 16px rgba(0,0,0,0.1);
    transition: transform 0.2s ease-in-out;
  }
  .card:hover {
    transform: scale(1.03);
  }
  
  
/* Make navbar float over banner */
.site-header {
    position: absolute;
    width: 100%;
    z-index: 5;
}

/* Prevent banner margin collapse */
body {
    padding-top: 90px;
    margin: 0;
}

.banner-gradient-mask {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 300px;
    width: 100%;
    background: linear-gradient(to bottom, rgba(255,255,255,0) 0%, #fafafa 100%);
    z-index: 1;
}

/* -------- auth pages -------- */
.auth-bg {
  /* hero gradient + blob decorations */
  background: radial-gradient(circle at 20% 30%, var(--brand) 0%, rgba(255,255,255,0) 55%),
              radial-gradient(circle at 80% 70%, var(--brand-dark) 0%, rgba(255,255,255,0) 60%),
              linear-gradient(to bottom right, #eef2f5 0%, #fafafa 100%);
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}

.auth-card {
  backdrop-filter: blur(12px);
  background: rgba(255,255,255,0.75);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  width: 100%;
  max-width: 420px;
  padding: 2.5rem 2rem;
}

.auth-card .form-control {
  background: rgba(255,255,255,0.85);
  border: 1px solid var(--border-color);
}

.auth-card .auth-title {
  font-weight: 600;
  margin-bottom: 1.5rem;
}

.auth-card .btn-primary {
  background-color: var(--brand);
  border-color: var(--brand);
}

/* -------- profile & order pages -------- */
.side-card {
  backdrop-filter: blur(10px);
  background: rgba(255,255,255,0.75);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow);
  padding: 2rem 1.5rem;
}

.table-modern thead {
  background:#f6f8fa;
  border-bottom:2px solid var(--border-color);
}
.table-modern tbody tr:hover {
  background:#fbfbfb;
}
.badge-status {
  font-size:.75rem;
  padding:.35rem .6rem;
  border-radius:.5rem;
}
.badge-processing { background:#ffe5b4;color:#aa6400; }
.badge-delivering { background:#e0f2ff;color:#0c63af; }
.badge-delivered { background:#d2f8e5;color:#0d7a43; }

./amazon/static/js/
./amazon/static/img/
./amazon/templates/
./amazon/templates/amazon/

--- File: ./amazon/templates/amazon/shopping_cart.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>Shopping Cart</h1>
    <!-- order list -->
    {% if orders %}
        <!-- NOTE: nested form is not allowed!!! -->
        <form id="form_orders" name="form_orders" action="{% url 'shop_cart' %}" method="post">
            {% csrf_token %}
            <div class="table-responsive mt-4 table-hover">
                <table id="order_table" class="table">
                    <thead>
                    <tr class="row text-center">
                        <th class="col-1">
                            <input class="form-check-input" type="checkbox" id="check_all">
                            <label class="form-check-label" for="check_all">#</label>
                        </th>
                        <!-- thumbnail + description -->
                        <th class="col-3 text-left">
                            <a href="#" style="color: #080000;">Item
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <th class="col-2">
                            <a href="#" style="color: #080000;">Qty
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <th class="col-2">
                            <a href="#" style="color: #080000;">Price
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <th class="col-2">
                            <a href="#" style="color: #080000;">Total
                                <i class="fa fa-sort"></i>
                            </a>
                        </th>
                        <!-- delete button -->
                        <th class="col-2"></th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for order in orders %}
                        <tr class="row text-center border-bottom">
                            <td class="col-1 align-self-center border-top-0">
                                <input class="form-check-input" type="checkbox" value="{{ order.id }}"
                                       name="checked_orders" id="checkbox{{ order.id }}">
                                <label class="form-check-label"
                                       for="checkbox{{ order.id }}"> {{ forloop.counter }}</label>
                            </td>
                            <td class="col-3 text-left border-top-0">
                                <img class="img-thumbnail" style="width: 50px; height: 50px" src="{{ order.item.img }}">
                                {{ order.item.description }}
                            </td>
                            <td class="col-2 align-self-center border-top-0">
                                <button type="button" class="btn" onclick="change_cnt({{ order.id }}, false)">
                                    <i class="fa fa-minus-square-o"></i>
                                </button>
                                <span id="cnt{{ order.id }}">{{ order.item_cnt }}</span>
                                <button type="button" class="btn" onclick="change_cnt({{ order.id }}, true)">
                                    <i class="fa fa-plus-square-o"></i>
                                </button>
                            </td>
                            <td class="col-2 align-self-center border-top-0">
                                &dollar; {{ order.item.price|floatformat:2 }}</td>
                            <td class="col-2 align-self-center border-top-0">
                                &dollar;
                                <span id="total_order{{ order.id }}">{{ order.total|floatformat:2 }}</span>
                            </td>
                            <td class="col-2 align-self-center border-top-0">
                                <button onclick="delete_order({{ order.id }})" class="btn btn-outline-secondary">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <!-- total price -->
            <div class="row">
                <div class="col-5 offset-7 text-right mt-4 mb-4">
                    <b>Total(all items): </b>
                    <span style="color: red">&dollar;</span>
                    <span id="total_cart" style="color: red">{{ total|floatformat:2 }}</span>
                </div>
            </div>
            <div class="text-right">
                <button onclick="check_out()" class="btn btn-primary"><i class="fa fa-dollar"></i> Checkout</button>
            </div>
        </form>
    {% else %}
        <h4 class="m-4">Nothing in your shopping cart,
            <a href="{% url 'home' %}">buy something TODAY!</a>
        </h4>
    {% endif %}
{% endblock content %}

<!-- javascript -->
{% block script %}
    <!-- jQiery table sorter plugin -->
    {% load static %}
    <script src="{% static "js/jquery.tablesorter.js" %}"></script>

    <script type="text/javascript">
        function delete_order(order_id) {
            add_operation_type(document.form_orders, "delete")
            const id_field = document.createElement("input")
            id_field.type = "hidden"
            id_field.name = "order_id"
            id_field.value = order_id
            document.form_orders.appendChild(id_field)
            document.form_orders.submit();
        }

        function check_out() {
            add_operation_type(document.form_orders, "checkout")
            document.form_orders.submit()
        }

        function add_operation_type(element, type) {
            const operation_field = document.createElement("input");
            operation_field.type = "hidden"
            operation_field.name = "operation"
            operation_field.value = type
            element.appendChild(operation_field)
        }

        function change_cnt(id, isAdd) {
            let opera;
            if (isAdd) {
                opera = "add";
            } else {
                opera = "minus";
            }
            const total = $("#total_cart").text();
            // use ajax to communicate with backend, change the count of specific order
            const config = {
                "url": "{% url "change_cnt" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": {
                    "order_id": id,
                    "operation": opera,
                    "total_cart": total,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                "success": function (result) {
                    $("#total_order" + id).text(result["total_order"]);
                    $("#cnt" + id).text(result["cnt"]);
                    // only update the total price if this order is checked
                    if ($("#checkbox" + id).is(":checked")) {
                        $("#total_cart").text(result["total_cart"]);
                    }
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }

        $("#check_all").on("click", function () {
            if (this.checked) {
                // use "prop" to set the value of all checkboxes
                $(":checkbox").prop("checked", true);
            } else {
                $(":checkbox").prop("checked", false);
            }
            // refresh total price
            cal_total();
        });

        const checkboxes = $("input[name='checked_orders']");
        checkboxes.on("click", function () {
            if (this.checked) {
                let i = 0;
                for (i = 0; i < checkboxes.length; i++) {
                    if (!checkboxes[i].checked) {
                        break;
                    }
                }
                if (i === checkboxes.length) {
                    $("#check_all").prop("checked", true);
                }
            } else {
                $("#check_all").prop("checked", false);
            }
            // refresh total price
            cal_total();
        });

        // this function will be called once the page is loaded
        $(function () {
            $(":checkbox").prop("checked", true);
            cal_total();
            $("#order_table").tablesorter({
                headers: {
                    0: {sorter: false}
                }
            });
        })

        // calculate the total price
        function cal_total() {
            add_operation_type(document.form_orders, "cal_total")
            const config = {
                "url": "{% url "shop_cart" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": $("#form_orders").serialize(),
                "success": function (result) {
                    $("#total_cart").text(result["total_cart"]);
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }
    </script>
{% endblock script %}
--- File: ./amazon/templates/amazon/home.html ---
{% extends "amazon/base.html" %}
{% load static %}

{% block content %}
<div id="heroBanner" class="carousel slide" data-ride="carousel" style="z-index: 1; position: relative; margin-top: -26px;">
  <div class="carousel-inner">
    <div class="carousel-item active">
      <img src="{% static 'img/banner1.png' %}" class="d-block w-100" style="height: 80vh; object-fit: cover;">
    </div>
    <div class="carousel-item">
      <img src="{% static 'img/banner2.png' %}" class="d-block w-100" style="height: 80vh; object-fit: cover;">
    </div>
    <div class="carousel-item">
      <img src="{% static 'img/banner3.png' %}" class="d-block w-100" style="height: 80vh; object-fit: cover;">
    </div>
  </div>
  <div class="banner-gradient-mask"></div>
  <a class="carousel-control-prev" href="#heroBanner" role="button" data-slide="prev">
    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
  </a>
  <a class="carousel-control-next" href="#heroBanner" role="button" data-slide="next">
    <span class="carousel-control-next-icon" aria-hidden="true"></span>
  </a>
</div>

<div class="container" style="margin-top: -200px; position: relative; z-index: 2; ">
  <!-- First Row: Two Small Sections -->
  <div class="row">
    {% for cat in categories|slice:":2" %}
      <div class="col-md-6 mb-4">
        <div class="small-section-card p-3">
          <h5 class="font-weight-bold">{{ cat.category|capfirst }}</h5>
          <div class="row">
            {% for item in items %}
              {% if item.category.category == cat.category %}
                <div class="col-6 p-2">
                  <a href="{% url 'item_detail' item.id %}" class="text-decoration-none text-dark d-block">
                    <img src="{{ item.img }}" class="img-fluid border" style="object-fit: contain; height: 120px; width: 100%;">
                    <small class="d-block mt-2 text-center">{{ item.description }}</small>
                  </a>
                </div>
              {% endif %}
            {% endfor %}
          </div>
        </div>
      </div>
    {% endfor %}
  </div>

  <!-- Large Horizontal Section(s) -->
  {% for cat in categories|slice:"2:" %}
    <div class="category-card p-3 mb-4">
      <div class="d-flex justify-content-between align-items-center mb-2">
        <h5 class="font-weight-bold mb-0">{{ cat.category|capfirst }}</h5>
        <a href="#" class="text-primary small">See more</a>
      </div>
      <div class="d-flex flex-nowrap overflow-auto pb-2">
        {% for item in items %}
          {% if item.category.category == cat.category %}
            <div class="product-card mr-3">
              <a href="{% url 'item_detail' item.id %}" class="text-decoration-none text-dark">
                <img src="{{ item.img }}" class="card-img-top" alt="{{ item.description }}">
                <div class="card-body p-2">
                  <h6 class="card-title text-truncate mb-1">{{ item.description }}</h6>
                  <p class="card-text text-danger mb-0">${{ item.price|floatformat:2 }}</p>
                  <small class="text-muted">Sold by {{ item.seller.username }}</small>
                </div>
              </a>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  {% endfor %}
</div>
{% endblock %}

--- File: ./amazon/templates/amazon/base.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    {% load static %}
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
   
    <!-- Add Open Sans (Amazon-style font) -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600&display=swap" rel="stylesheet">
    <style>
    body {
        font-family: 'Open Sans', sans-serif;
    }
    </style>

    <!-- 预加载关键资源 -->
    <link rel="preload" href="{% static 'amazon/main.css' %}" as="style">

    <link rel="stylesheet" type="text/css" href="{% static 'amazon/main.css' %}">

    {% if title %}
        <title>Mini Amazon - {{ title }}</title>
    {% else %}
        <title>Mini Amazon</title>
    {% endif %}
</head>
<body>
<header class="site-header">
    <!-- Navigation bar -->
    <nav class="navbar navbar-expand-md navbar-dark site-navbar fixed-top">
        <div class="container">
            <a class="navbar-brand mr-4 d-flex align-items-center" href="{% url 'home' %}">
                <img src="{% static 'img/logo.png' %}" alt="Logo" style="height: 40px;">
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarToggle"
                    aria-controls="navbarToggle" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <!-- use mr-auto to push all other elements to the right side -->
            <div class="collapse navbar-collapse" id="navbarToggle">

                <!-- Amazon-style search bar -->
                <form method="POST" action="{% url 'home' %}" class="form-inline mx-auto" style="flex-grow: 1;">
                    {% csrf_token %}
                    <div class="input-group w-100" style="max-width: 600px;">
                    <div class="input-group-prepend">
                        <select class="form-select" style="border-top-right-radius: 0; border-bottom-right-radius: 0;">
                        <option selected>All</option>
                        <option value="1">Books</option>
                        <option value="2">Electronics</option>
                        <option value="3">Toys</option>
                        </select>
                    </div>
                    <input
                        class="form-control"
                        type="search"
                        name="search"
                        placeholder="Search Amazon"
                        aria-label="Search"
                        style="min-width: 0; border-radius: 0;"
                    />
                    <button class="btn btn-warning" type="submit" style="border-top-left-radius: 0; border-bottom-left-radius: 0;">
                        <i class="fa fa-search"></i>
                    </button>
                    </div>
                </form>
                
  
                <!-- Navbar Right Side -->
                <ul class="navbar-nav">
                    {% if user.is_authenticated %}
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="accountDropdown" role="button"
                               data-bs-toggle="dropdown" aria-expanded="false">
                                Hello, {{ user.username }} <br><small>Account & Lists</small>
                            </a>
                            <div class="dropdown-menu" aria-labelledby="accountDropdown">
                                <a class="dropdown-item" href="{% url 'profile' %}">Account</a>
                                <a class="dropdown-item" href="{% url 'list-package' %}">Orders</a>
                                <div class="dropdown-divider"></div>
                                <a class="dropdown-item" href="{% url 'logout' %}">Logout</a>
                            </div>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link d-flex flex-column text-center" href="{% url 'list-package' %}">
                                Returns <br><small>& Orders</small>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link position-relative" href="{% url 'shop_cart' %}">
                                <i class="fa fa-shopping-cart fa-lg"></i>
                                <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                    {{ cart_count }}
                                </span>
                            </a>
                        </li>
                    {% else %}
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'login' %}">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="{% url 'register' %}">Register</a>
                        </li>
                    {% endif %}
                </ul>
                
            </div>
        </div>
    </nav>
</header>

<!-- 面包屑导航 -->
<div class="container mt-2 mb-3">
    {% block breadcrumbs %}{% endblock %}
</div>

<!-- By default, use container for each page. -->
<main role="main" class="container">
    {% block content %}
    {% endblock %}
</main>

<!-- 移动端底部导航 -->
<nav class="navbar fixed-bottom navbar-light bg-white shadow-sm d-md-none py-0">
  <div class="container-fluid px-0">
    <div class="row w-100 text-center mx-0">
      <div class="col py-2">
        <a href="{% url 'home' %}" class="text-decoration-none text-dark">
          <i class="fa fa-home d-block"></i>
          <small>Home</small>
        </a>
      </div>
      <div class="col py-2">
        <a href="{% url 'shop_cart' %}" class="text-decoration-none text-dark position-relative">
          <i class="fa fa-shopping-cart d-block"></i>
          <small>Cart</small>
          {% if cart_count > 0 %}
          <span class="position-absolute top-0 start-75 translate-middle badge rounded-pill bg-danger" style="font-size: 0.6rem;">
            {{ cart_count }}
          </span>
          {% endif %}
        </a>
      </div>
      <div class="col py-2">
        <a href="{% url 'list-package' %}" class="text-decoration-none text-dark">
          <i class="fa fa-box d-block"></i>
          <small>Orders</small>
        </a>
      </div>
      <div class="col py-2">
        <a href="{% url 'profile' %}" class="text-decoration-none text-dark">
          <i class="fa fa-user d-block"></i>
          <small>Account</small>
        </a>
      </div>
    </div>
  </div>
</nav>

<!-- Bootstrap 5 Bundle with Popper -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<!-- jQuery library (if needed) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<!-- Form validation -->
<script type="text/javascript">
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            Array.from(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>

{% block script %}
{% endblock %}
</body>
</html>

--- File: ./amazon/templates/amazon/list_package.html ---
{% extends "amazon/base.html" %}
{% block breadcrumbs %}
<nav aria-label="breadcrumb">
  <ol class="breadcrumb bg-transparent p-0 small">
    <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
    <li class="breadcrumb-item active" aria-current="page">Your Orders</li>
  </ol>
</nav>
{% endblock %}

{% block content %}
<h3 class="mb-4">Your Orders</h3>

<div class="content-section">
    {% if package_list %}
        <!--search-bar-->
        <form method="POST" class="mb-4">
            {% csrf_token %}
            <div class="row justify-content-center">
                <div class="col-md-8">
                    <div class="input-group p-2 bg-light rounded-pill shadow-sm searchbar">
                        <input name="search" type="search" placeholder="Which order are you looking for"
                            class="form-control border-0 bg-light" style="outline: none; border: 0;box-shadow: none">
                        <button type="submit" class="btn btn-link text-primary">
                            <i class="fa fa-search"></i>
                        </button>
                    </div>
                </div>
            </div>
        </form>

        <!--order-list using cards-->
        <div id="accordionOrders">
        {% for pack in package_list %}
            <div class="card mb-3 shadow-sm">
                <div class="card-header d-flex justify-content-between align-items-center" id="heading{{ pack.id }}">
                    <div>
                        <span class="h6">Order #{{ pack.id }}</span>
                        <span class="badge badge-status badge-{{ pack.status|lower }}">{{ pack.status }}</span>
                    </div>
                    <button class="btn btn-link" type="button" data-bs-toggle="collapse"
                            data-bs-target="#collapse{{ pack.id }}" aria-expanded="false" aria-controls="collapse{{ pack.id }}">
                        Details
                    </button>
                </div>

                <div id="collapse{{ pack.id }}" class="collapse" data-bs-parent="#accordionOrders">
                    <div class="card-body p-0">
                        <table class="table mb-0 table-modern">
                            <thead>
                                <tr><th>Item</th><th>Qty</th><th>Total</th></tr>
                            </thead>
                            <tbody>
                            {% for key, value in item_dict.items %}
                                {% if key is pack.id %}
                                    {% for order in value %}
                                        <tr>
                                            <td>
                                                <img class="img-thumbnail me-2" style="width: 40px; height: 40px"
                                                     src="{{ order.item.img }}">
                                                {{ order.item.description }}
                                            </td>
                                            <td>{{ order.item_cnt }}</td>
                                            <td>${{ order.total_fixed|floatformat:2 }}</td>
                                        </tr>
                                    {% endfor %}
                                {% endif %}
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer d-flex justify-content-between align-items-center">
                        <small class="text-muted">Created {{ pack.creation_time|date:"M d, Y" }}</small>
                        <div>
                            <strong class="me-3">Total ${{ pack.total_fixed|floatformat:2 }}</strong>
                            <a href="/listpackage/{{ pack.id }}/" class="btn btn-outline-info btn-sm">
                                Detail
                            </a>
                            <a href="{% url 'delete-package' pack.id %}" class="btn btn-outline-secondary btn-sm ms-2">
                                Delete
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        {% empty %}
            <h4 class="m-4">No order yet, <a href="{% url 'home' %}">start shopping!</a></h4>
        {% endfor %}
        </div>
    {% else %}
        <h4 class="m-4">No order found,
            <a href="{% url 'home' %}">buy something TODAY!</a>
        </h4>
    {% endif %}
</div>
{% endblock %}

--- File: ./amazon/templates/amazon/item_management.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>Item management</h1>
    <!-- order list -->
    {% if items %}
        <div class="table-responsive mt-4 table-hover">
            <table class="table">
                <thead>
                <tr class="row text-center">
                    <th class="col-1">#</th>
                    <!-- thumbnail + description -->
                    <th class="col-5 text-left">Item</th>
                    <th class="col-2">Price</th>
                    <th class="col-1">Status</th>
                    <!-- delete button -->
                    <th class="col-3">Action</th>
                </tr>
                </thead>
                <tbody>
                {% for item in items %}
                    <tr class="row text-center border-bottom">
                        <td class="col-1 align-self-center border-top-0">
                            <label class="col-form-label"> {{ forloop.counter }}</label>
                        </td>
                        <td class="col-5 text-left border-top-0">
                            <img class="img-thumbnail" style="width: 50px; height: 50px" src="{{ item.img }}">
                            {{ item.description }}
                        </td>
                        <td class="col-2 align-self-center border-top-0">
                            &dollar; {{ item.price|floatformat:2 }}
                        </td>
                        <td class="col-1 align-self-center border-top-0">
                            <span id="item_status">
                                {% if item.on_sell %}
                                    selling
                                {% else %}
                                    removed
                                {% endif %}
                            </span>
                        </td>
                        <td class="col-3 align-self-center border-top-0">
                            <a href="{% url "add_update_item" item.id %}" class="btn btn-primary" style="color: white">
                                Edit
                            </a>
                            <button id="bt_delete_{{ item.id }}" onclick="delete_item({{ item.id }})" class="btn btn-outline-secondary">
                                {% if item.on_sell %}
                                Delete
                                {% else %}
                                Sell
                                {% endif %}
                            </button>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
            <div class="text-right">
                <a href="{% url "add_update_item" "-1" %}" class="btn btn-primary" style="color: white"><i
                        class="fa fa-plus"></i>
                    Add more</a>
            </div>
        </div>
    {% else %}
        <h4 class="m-4">Nothing you are selling,
            <a href="{% url "add_update_item" "-1" %}">publish your first item today!</a>
        </h4>
    {% endif %}
{% endblock content %}

<!-- javascript -->
{% block script %}
    <script type="text/javascript">
        function delete_item(item_id) {
            const config = {
                "url": "{% url "delete_item" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": {
                    "item_id": item_id,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                "success": function (result) {
                    $("#bt_delete_" + item_id).text(result["action"]);
                    $("#item_status").text(result["status"]);
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }

        function add_operation_type(element, type) {
            const operation_field = document.createElement("input");
            operation_field.type = "hidden"
            operation_field.name = "operation"
            operation_field.value = type
            element.appendChild(operation_field)
        }
    </script>
{% endblock script %}
--- File: ./amazon/templates/amazon/checkout.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>Checkout</h1>
    <div class="row">
        <div class="col-md-8 order-md-1">
            <form class="needs-validation" novalidate action="{% url "checkout" package.id %}" method="post">
                {% csrf_token %}
                <div class="mb-3">
                    <label for="ups_name">UPS Account Name <span class="text-muted">(Optional)</span></label>
                    <input type="text" class="form-control" id="ups_name" name="ups_name" placeholder="admin"
                           value=
                                   {% if user.profile.ups_name %}
                                       {{ user.profile.ups_name }}
                                   {% else %}
                                       ""
                                   {% endif %}>
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="ups" name="checkbox"
                               id="checkbox_ups_name" checked>
                        <label class="form-check-label" for="checkbox_ups_name">save to profile</label>
                    </div>
                </div>

                <div class="mb-3">
                    <label for="address">Address</label>
                    <div class="row">
                        <div class="input-group col-md-6">
                            <div class="input-group-prepend">
                                <label for="x" class="input-group-text">X: </label>
                            </div>
                            <input type="number" min=0 max=150 class="form-control" name="x" placeholder="x coordinate"
                                   id="x" required value=
                                           {% if user.profile.default_x != -1 %}
                                               {{ user.profile.default_x }}
                                           {% endif %}>
                            <div class="invalid-feedback" style="width: 100%;">
                                X value is required.
                            </div>
                        </div>

                        <div class="input-group col-md-6">
                            <div class="input-group-prepend">
                                <label for="y" class="input-group-text">Y: </label>
                            </div>
                            <input type="number" min=0 max=150 class="form-control" id="y" name="y"
                                   placeholder="y coordinate" required value=
                                           {% if user.profile.default_y != -1 %}
                                               {{ user.profile.default_y }}
                                           {% endif %}>
                            <div class="invalid-feedback" style="width: 100%;">
                                Y value is required.
                            </div>
                        </div>
                    </div>

                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="address" name="checkbox"
                               id="checkbox_address" checked>
                        <label class="form-check-label" for="checkbox_address">save to profile</label>
                    </div>
                </div>

                <hr class="mb-4">

                <h4 class="mb-3">Payment</h4>

                <div class="d-block my-3">
                    <div class="custom-control custom-radio">
                        <input id="credit" name="paymentMethod" type="radio" class="custom-control-input" checked=""
                               required>
                        <label class="custom-control-label" for="credit">Credit card</label>
                    </div>
                    <div class="custom-control custom-radio">
                        <input id="debit" name="paymentMethod" type="radio" class="custom-control-input" required>
                        <label class="custom-control-label" for="debit">Debit card</label>
                    </div>
                    <div class="custom-control custom-radio">
                        <input id="paypal" name="paymentMethod" type="radio" class="custom-control-input" required>
                        <label class="custom-control-label" for="paypal">PayPal</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 mb-3">
                        <label for="cc-name">Name on card</label>
                        <input type="text" class="form-control" id="cc-name" placeholder="" required="" value="ece568">
                        <small class="text-muted">Full name as displayed on card</small>
                        <div class="invalid-feedback">
                            Name on card is required
                        </div>
                    </div>
                    <div class="col-md-6 mb-3">
                        <label for="cc-number">Credit card number</label>
                        <input type="text" class="form-control" id="cc-number" placeholder="" required="" value="12345">
                        <div class="invalid-feedback">
                            Credit card number is required
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-3 mb-3">
                        <label for="cc-expiration">Expiration</label>
                        <input type="text" class="form-control" id="cc-expiration" placeholder="" required=""
                               value="08/23">
                        <div class="invalid-feedback">
                            Expiration date required
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <label for="cc-cvv">CVV</label>
                        <input type="text" class="form-control" id="cc-cvv" placeholder="" required="" value="123">
                        <div class="invalid-feedback">
                            Security code required
                        </div>
                    </div>
                </div>
                <hr class="mb-4">
                <button class="btn btn-primary btn-lg btn-block" type="submit">Place your order</button>
            </form>
        </div>

        <!-- side bar, show package info -->
        <div class="col-md-4 order-md-2">
            <ul class="list-group mb-3">
                {% for my_order in package.orders.all %}
                    <li class="list-group-item d-flex justify-content-between lh-condensed">
                        <div>
                            <h6 class="my-0">{{ my_order.item.description }}</h6>
                            <small class="text-muted">Qty: {{ my_order.item_cnt }}</small>
                            <small class="text-muted">Price: &dollar; {{ my_order.item_price|floatformat:2 }}</small>
                        </div>
                        <span class="text-muted">&dollar; {{ my_order.total|floatformat:2 }}</span>
                    </li>
                {% endfor %}
                <li class="list-group-item d-flex justify-content-between">
                    <span>Total (USD)</span>
                    <strong>&dollar; {{ total|floatformat:2 }}</strong>
                </li>
            </ul>
        </div>
    </div>
{% endblock content %}


--- File: ./amazon/templates/amazon/item_detail.html ---
{% extends "amazon/base.html" %}

{% block breadcrumbs %}
<nav aria-label="breadcrumb">
  <ol class="breadcrumb bg-transparent p-0 small">
    <li class="breadcrumb-item"><a href="{% url 'home' %}">Home</a></li>
    <li class="breadcrumb-item">{{ item.category.category|capfirst }}</li>
    <li class="breadcrumb-item active" aria-current="page">{{ item.description }}</li>
  </ol>
</nav>
{% endblock %}

{% block content %}
<div class="card shadow-sm border-0 mb-4">
    <div class="card-body">
        <div class="row">
            <!-- 商品图片 -->
            <div class="col-md-5 mb-4">
                <img src="{{ item.img }}" 
                     class="img-fluid rounded" 
                     alt="{{ item.description }}" 
                     style="width: 100%; max-height: 400px; object-fit: contain;">
            </div>
            
            <!-- 商品信息 -->
            <div class="col-md-4 mb-4">
                <h2 class="mb-3">{{ item.description }}</h2>
                
                <div class="mb-3">
                    <span class="badge bg-light text-secondary">{{ item.category.category|capfirst }}</span>
                    <small class="text-muted ml-2">Sold by <a href="#">{{ item.seller.username }}</a></small>
                </div>
                
                <div class="d-flex align-items-center mb-3">
                    <span class="text-success fw-bold fs-4">${{ item.price|floatformat:2 }}</span>
                    <span class="badge bg-warning text-dark ms-2">Free Shipping</span>
                </div>
                
                <p class="text-muted mb-3">
                    Fast delivery, high quality product, satisfaction guaranteed.
                </p>
                
                <div class="d-flex align-items-center mb-3">
                    <div class="text-warning">
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star"></i>
                        <i class="fa fa-star-half-alt"></i>
                    </div>
                    <span class="ms-2">4.5 (125 reviews)</span>
                </div>
            </div>
            
            <!-- 购买选项 -->
            <div class="col-md-3">
                <div class="side-card">
                    <div class="d-flex align-items-center mb-3">
                        <span class="text-success fw-bold fs-4">${{ item.price|floatformat:2 }}</span>
                    </div>
                    
                    <p class="mb-2"><i class="fa fa-check-circle text-success me-2"></i> Free shipping</p>
                    <p class="mb-2"><i class="fa fa-truck text-muted me-2"></i> Arrives <strong>Tomorrow</strong></p>
                    <p class="mb-3"><i class="fa fa-map-marker-alt text-muted me-2"></i> Deliver to your address</p>
                    
                    <form name="item_form" method="POST" onsubmit="return validForm();">
                        {% csrf_token %}
                        <div class="mb-3">
                            <label for="count" class="form-label">Quantity</label>
                            <input type="number" name="count" id="count" min="1" max="999" class="form-control" value="1" required>
                        </div>
                        <button name="action" value="buy" class="btn btn-primary w-100 mb-2">
                            <i class="fa fa-bolt me-1"></i> Buy Now
                        </button>
                        <button name="action" value="add" class="btn btn-outline-secondary w-100">
                            <i class="fa fa-shopping-cart me-1"></i> Add to Cart
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block script %}
<script type="text/javascript">
    function validForm() {
        if ("{{ item.seller.username }}" === "{{ user.get_username }}") {
            alert("You can't buy your own item.");
            return false;
        } else {
            return true;
        }
    }
</script>
{% endblock %}

--- File: ./amazon/templates/amazon/list_package_detail.html ---
{% extends "amazon/base.html" %}
{% block content %}
<div class="d-flex align-items-center mb-4">
    <a href="/listpackage/" class="text-decoration-none">
        <i class="fa fa-arrow-left mr-2"></i>Back to Orders
    </a>
    <h4 class="ml-3 mb-0">Order #{{ pack.id }} Details</h4>
</div>

<div class="row">
    <!-- Left column - order items -->
    <div class="col-lg-8">
        <div class="content-section">
            <h5 class="mb-3">Order Items</h5>
            
            <table class="table table-modern">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th width="15%">Quantity</th>
                        <th width="20%">Price</th>
                    </tr>
                </thead>
                <tbody>
                {% for prod in product_list %}
                    <tr>
                        <td>
                            <div class="d-flex align-items-center">
                                <img class="img-thumbnail mr-3" style="width: 60px; height: 60px" src="{{ prod.item.img }}">
                                <div>
                                    <p class="mb-1">{{ prod.item.description }}</p>
                                    <small class="text-muted">${{ prod.item.price|floatformat:2 }} each</small>
                                </div>
                            </div>
                        </td>
                        <td class="align-middle">{{ prod.item_cnt }}</td>
                        <td class="align-middle">${{ prod.total|floatformat:2 }}</td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
    
    <!-- Right column - order info -->
    <div class="col-lg-4">
        <div class="side-card">
            <h5 class="mb-4">Order Summary</h5>
            
            <!-- Stepper component for order status -->
            <ul class="list-inline text-center mb-4">
                <li class="list-inline-item">
                    <span class="badge badge-pill badge-status badge-processing">Processing</span>
                    <br><small>Ordered</small>
                </li>
                <li class="list-inline-item"><i class="fa fa-chevron-right"></i></li>
                <li class="list-inline-item">
                    <span class="badge badge-pill badge-status badge-delivering">Delivering</span>
                    <br><small>Shipping</small>
                </li>
                <li class="list-inline-item"><i class="fa fa-chevron-right"></i></li>
                <li class="list-inline-item">
                    <span class="badge badge-pill badge-status badge-delivered">Delivered</span>
                    <br><small>Completed</small>
                </li>
            </ul>
            
            <hr>
            
            <ul class="list-unstyled">
                <li class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span class="text-muted">Order Date:</span>
                        <span>{{ pack.creation_time|date:"M d, Y" }}</span>
                    </div>
                </li>
                <li class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span class="text-muted">Status:</span>
                        <span class="badge badge-status badge-{{ pack.status|lower }}">{{ pack.status }}</span>
                    </div>
                </li>
                <li class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span class="text-muted">Shipping Address:</span>
                        <span>({{ pack.dest_x }}, {{ pack.dest_y }})</span>
                    </div>
                </li>
                <li class="mb-2">
                    <div class="d-flex justify-content-between">
                        <span class="text-muted">Tracking #:</span>
                        <span>{{ pack.id }}</span>
                    </div>
                </li>
            </ul>
            
            <hr>
            
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Total:</h5>
                <h4 class="mb-0 text-success">${{ pack.total|floatformat:2 }}</h4>
            </div>
        </div>
    </div>
</div>

{% endblock %}

--- File: ./amazon/templates/amazon/success.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <!-- success page, show success info -->
    {% if is_add_cart %}
        <h1>{{ info }}</h1>
        <h2 class="mt-4"><a href="{% url "shop_cart" %}">My cart</a></h2>
    {% elif is_checkout %}
        <h1>{{ info }}</h1>
        <h2 class="mt-4"><a href="{% url "list-package" %}">My order</a></h2>
    {% elif is_add_item %}
        <h1>{{ info }}</h1>
        <h2 class="mt-4"><a href="{% url "add_update_item" "-1" %}">Add more</a></h2>
        <h2 class="mt-4"><a href="{% url "item_management" %}">Go to my selling page</a></h2>
    {% else %}
        <h1>Succeed!</h1>
    {% endif %}
    <h2 class="mt-4"><a href="{% url "home" %}">Buy more</a></h2>
{% endblock content %}
--- File: ./amazon/templates/amazon/item_add_update.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h1>
        {% if item %}
            Edit Product
        {% else %}
            Add Product
        {% endif %}
    </h1>
    <form name="item_form" action="{% url "add_update_item" "-1" %}" method="POST" enctype="multipart/form-data"
          class="needs-validation" novalidate>
        {% csrf_token %}
        <input type="hidden" name="item_id" value="{% if item %} {{ item.id }} {% else %} -1 {% endif %}">
        <div class="row">
            <div class="col-md-8 order-md-1">

                <div class="input-group mt-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Description:</span>
                    </div>
                    <input id="description" type="text" class="form-control" name="description" placeholder="e.g. apple"
                           required>
                    <div class="invalid-feedback" style="width: 100%;">
                        description is required
                    </div>
                </div>

                <div class="input-group mt-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Price:</span>
                    </div>
                    <input id="price" type="number" class="form-control" name="price" placeholder="e.g. 1.99"
                           step="0.01" required>
                    <div class="input-group-append">
                        <span class="input-group-text">&dollar;</span>
                    </div>
                    <div class="invalid-feedback" style="width: 100%;">
                        price is required
                    </div>
                </div>

                <div class="input-group mt-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text">
                            <label for="category" class="form-check-label">Category:</label>
                        </span>
                    </div>
                    <select id="category" name="category" class="form-control" onchange="select(this)">
                        {% for c in categories %}
                            <option value="{{ c.category }}">{{ c.category }}</option>
                        {% endfor %}
                        <option value="">create a new one</option>
                    </select>
                </div>

                <hr class="mb-4">
                <button id="bt_submit" class="btn btn-primary btn-lg btn-block" type="submit">Add Item</button>
            </div>

            <!-- side bar, upload image -->
            <div class="col-md-4 order-md-2">
                <label for="img_preview" class="col-form-label">Preview: </label>
                <img id="img_preview" class="img-thumbnail col-md-10 offset-1 mb-4"
                     src="/static/img/sample.jpg" alt="preview"/>

                <!-- for convenience, don't allow seller to change image -->
                {% if not item %}
                    <div class="input-group">
                        <div class="custom-file input-group">
                            <input id="img" type="file" accept="image/jpg,image/jpeg" class="custom-file-input" name="thumbnail"
                                   onchange="preview()" required>
                            <label id="img_label" class="custom-file-label">Choose image</label>
                            <div class="invalid-feedback" style="width: 100%;">
                                please upload a thumbnail
                            </div>
                        </div>
                    </div>
                {% endif %}
            </div>
        </div>

    </form>
{% endblock content %}

{% block script %}
    <script type="text/javascript">
        // preview the image file just upload
        function preview() {
            const input = document.getElementById("img");
            const preview = document.getElementById("img_preview");
            const label = document.getElementById("img_label");
            preview.src = URL.createObjectURL(input.files[0]);
            label.innerText = input.files[0].name;
            preview.onload = function () {
                URL.revokeObjectURL(preview.src);
            }
        }

        // add new category
        function select(selection) {
            if (selection.value === "") {
                const category = prompt("Please input the new category", "");
                console.debug(category);
                if (category) {
                    const option = document.createElement("option");
                    option.value = category;
                    option.text = category;
                    selection.add(option, 0);
                    option.selected = true;
                }
            }
        }

        // set the value of each field if applicable
        $(function () {
            {% if item %}
                $("#description").val("{{ item.description }}").change();
                $("#price").val({{ item.price }});
                $("#category").val("{{ item.category }}");
                $("#img_preview").attr("src", "{{ item.img }}");
                $("#bt_submit").text("Save");
            {% endif %}
        });

        $("#description").change(function () {
            check_duplicate($(this).val())
        });

        // check whether an item is already existed
        function check_duplicate(description) {
            const config = {
                "url": "{% url "check_item" %}",
                "async": true,
                "type": "post",
                "dataType": "json",
                "data": {
                    "item_id":
                        {% if item %}
                            "{{ item.id }}"
                        {% else %}
                            "-1"
                        {% endif %},
                    "item_description": description,
                    "csrfmiddlewaretoken": "{{ csrf_token }}"
                },
                "success": function (result) {
                    if (result["exist"]) {
                        $("#description").val("")
                        alert("the item already exist")
                    }
                },
                "error": function (xhr, status, error) {

                }
            };
            $.ajax(config);
        }
    </script>
{% endblock script %}

--- File: ./amazon/urls.py ---
from django.urls import path

from . import views

urlpatterns = [
    path('', views.home, name="home"),
    path('category/<category>', views.home_category, name="home_category"),
    path('seller/<int:seller_id>', views.home_seller, name="home_seller"),
    path('item/<int:item_id>', views.item_detail, name="item_detail"),
    path('checkout/<int:package_id>', views.checkout, name="checkout"),
    path('shopcart', views.shop_cart, name="shop_cart"),
    path('add_update_item/<item_id>', views.add_update_item, name="add_update_item"),
    path('item_management', views.item_management, name="item_management"),
    path('change_cnt', views.change_cnt, name="change_cnt"),
    path('check_item', views.check_item, name="check_item"),
    path('delete_item', views.delete_item, name="delete_item"),
    path('listpackage/', views.list_package, name='list-package'),
    path('listpackage/<int:package_id>/', views.list_package_detail, name='list-package-detail'),
    path('deletepackage/<int:package_id>', views.delete_package, name='delete-package'),
]

--- File: ./amazon/views.py ---
from django.shortcuts import render, redirect
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse, Http404
from amazon.utils import *

from .models import *
from .utils import purchase

def home(request):
    context = {}
    items = Item.objects.filter(on_sell=True).order_by("id")
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context["items"] = items
    context["categories"] = Category.objects.all()
    context["category"] = "All"
    
    if request.user.is_authenticated:
        context["cart_count"] = Order.objects.filter(owner=request.user, package__isnull=True).count()
    else:
        context["cart_count"] = 0

    return render(request, "amazon/home.html", context)

# Home page, but with specific category
def home_category(request, category):
    category = Category.objects.get(category=category)
    items = Item.objects.filter(category=category).order_by("id").all()
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context = {
        "items": items,
        "categories": Category.objects.all(),
        "category": category
    }
    return render(request, "amazon/home.html", context)


def home_seller(request, seller_id):
    seller = User.objects.get(pk=seller_id)
    items = Item.objects.filter(seller=seller).order_by("id").all()
    if request.method == "POST":
        search = request.POST["search"]
        items = items.filter(description__icontains=search)
    context = {
        "items": items,
        "seller_name": seller.username
    }
    return render(request, "amazon/home.html", context)


# Item detail page, used to show the detail info of one specific item.
def item_detail(request, item_id):
    item = Item.objects.get(pk=item_id)
    context = {}
    if request.method == "POST":
        if not request.user.is_authenticated:
            return redirect(reverse("login"))
        cnt = int(request.POST["count"])
        if request.POST["action"] == "buy":
            # create a new package
            package = Package(owner=request.user)
            package.save()
            package.orders.create(
                owner=request.user,
                item=item,
                item_cnt=cnt
            )
            return redirect(reverse("checkout", kwargs={'package_id': package.id}))
        else:
            try:
                # try to get an existing order
                exist_order = Order.objects.get(owner=request.user, item=item, package__isnull=True)
                exist_order.item_cnt += cnt
                exist_order.save()
            except Order.DoesNotExist:
                # create a new order
                order = Order(owner=request.user, item=item, item_cnt=cnt)
                order.save()
            context["info"] = "Successfully add to cart."
            context["is_add_cart"] = True
            return render(request, "amazon/success.html", context)
    else:
        context["item"] = item
        return render(request, "amazon/item_detail.html", context)


@login_required
def checkout(request, package_id):
    package = Package.objects.get(pk=package_id)
    context = {}
    # actually checkout
    if request.method == "POST":
        x = int(request.POST["x"])
        y = int(request.POST["y"])
        ups_name = ""
        if "ups_name" in request.POST.keys():
            ups_name = request.POST["ups_name"]
        # save the value into profile
        checked = request.POST.getlist("checkbox")
        if "ups" in checked:
            request.user.profile.ups_name = ups_name
        if "address" in checked:
            request.user.profile.default_x = x
            request.user.profile.default_y = y
        request.user.save()
        package.dest_x = x
        package.dest_y = y
        package.ups_name = ups_name
        package.warehouse = cal_warehouse(x, y)
        package.save()
        print("deliver to: " + str(package.dest_x) + "  " + str(package.dest_y))
        context["info"] = "Purchase successful."
        context["is_checkout"] = True
        # once user checkout, the price will be final price
        for order in package.orders.all():
            order.item_price = order.item.price
            order.save()
        # send the purchase request to daemon
        purchase(package.id)
        send_email_async([request.user.email], package.info_str())
        return render(request, "amazon/success.html", context)
    else:
        context["total"] = package.total()
        context["package"] = package
        return render(request, "amazon/checkout.html", context)


@login_required
def shop_cart(request):
    orders = Order.objects.filter(owner=request.user).filter(package__isnull=True).order_by("creation_time")
    if request.method == 'POST':
        operation = request.POST["operation"]
        # user delete some order
        if operation == "delete":
            oid = request.POST["order_id"]
            orders.get(pk=oid).delete()
        elif operation == "checkout":
            # get all checked orders
            checked_orders = request.POST.getlist("checked_orders")
            print(checked_orders)
            # will only create a new package when at least one order is chosen
            if len(checked_orders) > 0:
                pack = Package(owner=request.user, warehouse=1)
                pack.save()
                for o in checked_orders:
                    print(orders.get(pk=int(o)))
                    pack.orders.add(orders.get(pk=int(o)))
                return redirect(reverse("checkout", kwargs={'package_id': pack.id}))
        # api for calculating the total price
        elif operation == "cal_total" and request.is_ajax():
            checked_orders = request.POST.getlist("checked_orders")
            total = 0.0
            for o in checked_orders:
                total += orders.get(pk=o).total()
            return JsonResponse({"total_cart": ("%.2f" % total)})
    total = 0
    for o in orders:
        total += o.total()
    context = {"orders": orders, "total": total}
    return render(request, "amazon/shopping_cart.html", context)


@login_required
def list_package(request):
    package_list = Package.objects.filter(owner=request.user).order_by('creation_time').all()
    item_dict = {}

    if request.method == "POST":
        search = request.POST["search"]
        search_list = []
        for pack in package_list:
            orders = Order.objects.filter(package__id=pack.id, item__description__icontains=search)
            if orders:
                search_list.append(pack)
        package_list = search_list

    for pack in package_list:
        orders = Order.objects.filter(package__id=pack.id)
        item_dict[pack.id] = orders

    context = {
        'package_list': package_list,
        'item_dict': item_dict,
    }
    return render(request, 'amazon/list_package.html', context)


@login_required
def delete_package(request, package_id):
    Package.objects.get(owner=request.user, id=package_id).delete()
    return HttpResponseRedirect(reverse('list-package'))


@login_required
def list_package_detail(request, package_id):
    context = {
        'product_list': Order.objects.filter(package__id=package_id),
        'pack': Package.objects.get(owner=request.user, id=package_id),
    }
    return render(request, 'amazon/list_package_detail.html', context)

@login_required
def item_management(request):
    items = Item.objects.filter(seller=request.user).all()
    context = {"items": items}
    return render(request, "amazon/item_management.html", context)

@login_required
def add_update_item(request, item_id):
    if not request.user.profile.is_seller:
        raise Http404("Your are not a seller")
    if request.method == "POST":
        # if the method is POST, we should use the id in POST data rather than URL
        item = request.POST["item_id"]
        description = request.POST["description"]
        price = float(request.POST["price"])
        category = request.POST.getlist("category")[0]
        # check whether it's a new category
        try:
            c = Category.objects.get(category=category)
        except Category.DoesNotExist:
            c = Category(category=category)
            c.save()
        if int(item) == -1:
            p = request.FILES["thumbnail"]
            img_name = description.replace(" ", "_") + "_" + request.user.username + "." + p.name.split(".")[1]
            save_img(img_name, p)
            # new item
            new_item = Item(
                description=description,
                price=price,
                category=c,
                img="/static/img/" + img_name,
                seller=request.user
            )
            new_item.save()
            context = {"is_add_item": True, "info": "Successful add the item."}
            return render(request, "amazon/success.html", context)
        else:
            # existing item
            old_item = Item.objects.get(pk=item)
            old_item.description = description
            old_item.price = price
            old_item.category = c
            old_item.save()
            return redirect(reverse("item_management"))

    context = {}
    categories = Category.objects.all()
    context["categories"] = categories
    if item_id != "-1":
        context["item"] = Item.objects.get(pk=int(item_id))
    return render(request, "amazon/item_add_update.html", context)

@login_required
def change_cnt(request):
    if request.is_ajax() and request.method == "POST":
        order_id = request.POST["order_id"]
        operation = request.POST["operation"]
        total_cart = float(request.POST["total_cart"])
        order = Order.objects.get(pk=order_id)
        # lower and upper limit --- 1 ~ 99
        if operation == "add" and order.item_cnt < 99:
            order.item_cnt += 1
            order.save()
            total_cart += order.item.price
        elif operation == "minus" and order.item_cnt > 1:
            order.item_cnt -= 1
            order.save()
            total_cart -= order.item.price
        data = {
            # latest count
            "cnt": order.item_cnt,
            # total price for the order
            "total_order": ("%.2f" % order.total()),
            # total price for all
            "total_cart": ("%.2f" % total_cart)
        }
        return JsonResponse(data)
    return JsonResponse({})


# check whether an item has already exist
@login_required
def check_item(request):
    if request.is_ajax() and request.method == "POST":
        new_item = request.POST["item_description"]
        item_id = request.POST["item_id"]
        try:
            # valid, as long as the item name has no duplication within current seller
            Item.objects.exclude(pk=int(item_id)).filter(seller=request.user).get(description=new_item)
            data = {"exist": True}
        except Item.DoesNotExist:
            data = {"exist": False}
        return JsonResponse(data)
    return JsonResponse({})


@login_required
def delete_item(request):
    if request.is_ajax() and request.method == "POST":
        item_id = request.POST["item_id"]
        data = {}
        item = Item.objects.get(pk=int(item_id))
        if item.on_sell:
            item.on_sell = False
            data["status"] = "removed"
            data["action"] = "Sell"
        else:
            item.on_sell = True
            data["status"] = "selling"
            data["action"] = "Delete"
        item.save()
        return JsonResponse(data)
    return JsonResponse({})
./users/

--- File: ./users/signals.py ---
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import Profile


@receiver(post_save, sender=User)
def create_profile(sender, instance, created, **kwargs):
    if created:
        Profile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_profile(sender, instance, **kwargs):
    instance.profile.save()
./users/migrations/

--- File: ./users/migrations/__init__.py ---
./users/migrations/__pycache__/

--- File: ./users/migrations/0001_initial.py ---
# Generated by Django 3.1.8 on 2025-04-25 03:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='auth.user')),
                ('is_seller', models.BooleanField(default=False)),
                ('ups_name', models.CharField(blank=True, default='', max_length=50)),
                ('default_x', models.IntegerField(blank=True, default=-1)),
                ('default_y', models.IntegerField(blank=True, default=-1)),
            ],
        ),
    ]

--- File: ./users/models.py ---
from django.db import models
from django.contrib.auth.models import User


class Profile(models.Model):
    user = models.OneToOneField(User, primary_key=True, on_delete=models.CASCADE)
    is_seller = models.BooleanField(default=False)
    ups_name = models.CharField(max_length=50, default="", blank=True)
    default_x = models.IntegerField(default=-1, blank=True)
    default_y = models.IntegerField(default=-1, blank=True)

    def __str__(self):
        return f'{self.user.username} Profile'
./users/__pycache__/

--- File: ./users/apps.py ---
from django.apps import AppConfig


class UsersConfig(AppConfig):
    name = 'users'

    def ready(self):
        import users.signals
--- File: ./users/forms.py ---
from django import forms
from django.contrib.auth.models import User
from django.contrib.auth.forms import UserCreationForm
from .models import Profile


class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']


class UserUpdateForm(forms.ModelForm):
    email = forms.EmailField()

    class Meta:
        model = User
        fields = ['username', 'email']


class ProfileUpdateForm(forms.ModelForm):
    class Meta:
        model = Profile
        fields = ['is_seller']

--- File: ./users/utils.py ---
from django.contrib.auth.models import User
from django.contrib.auth.password_validation import validate_password
from django.core.exceptions import ValidationError


def check_username(username, user):
    if " " in username:
        return ["username contains space"]
    if username != user.username:
        try:
            User.objects.get(username=username)
            return ["this name has already been used"]
        except User.DoesNotExist:
            return []
    return []


def check_password(old_p, new_p, user):
    # check old password
    if not user.check_password(old_p):
        return ["old password not match"]
    # check whether is the same
    if old_p == new_p:
        return ["old and new password are the same"]
    # check new password
    try:
        validate_password(new_p)
    except ValidationError as e:
        errors = []
        for error in e.error_list:
            errors.extend(error.messages)
        return errors
    return []

./users/templates/
./users/templates/users/

--- File: ./users/templates/users/profile.html ---
{% extends "amazon/base.html" %}
{% load widget_tweaks %}
{% block content %}
<div class="row">
  <!-- 左侧个人卡片 -->
  <div class="col-md-4 mb-4">
    <div class="side-card text-center">
      <h4 class="mb-1">{{ user.username }}</h4>
      <small class="text-muted">{{ user.email }}</small>
      <hr>
      <p class="mb-2">
        <span class="text-muted">Seller</span>：
        {% if user.profile.is_seller %}
           <span class="badge badge-success">Yes</span>
        {% else %}
           <span class="badge badge-secondary">No</span>
        {% endif %}
      </p>
      <a href="{% url 'logout' %}" class="btn btn-outline-danger btn-sm">Logout</a>
    </div>
  </div>

  <!-- 右侧多 Tab 表单 -->
  <div class="col-md-8">
    <ul class="nav nav-tabs" id="profileTab" role="tablist">
      <li class="nav-item">
        <a class="nav-link active" id="info-tab" data-toggle="tab"
           href="#info" role="tab">Profile</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="password-tab" data-toggle="tab"
           href="#password" role="tab">Password</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="optional-tab" data-toggle="tab"
           href="#optional" role="tab">Optional</a>
      </li>
      <li class="nav-item">
        <a class="nav-link" id="seller-tab" data-toggle="tab"
           href="#seller" role="tab">Seller</a>
      </li>
    </ul>

    <div class="tab-content py-4">
      <!-- Profile -->
      <div class="tab-pane fade show active" id="info" role="tabpanel">
        <form method="POST" novalidate class="needs-validation">
          {% csrf_token %}
          <input type="hidden" name="operation" value="update_profile">
          <div class="form-group">
            <label>Username</label>
            <input name="username" required class="form-control" value="{{ username }}">
          </div>
          <div class="form-group">
            <label>Email</label>
            <input name="email" type="email" required class="form-control" value="{{ email }}">
          </div>
          
          <ul class="mt-2">
            <li>Your username can't contain space.</li>
            <li>Your username can't be duplicate with any other user.</li>
          </ul>
          
          {% if name_errors %}
            <div class="alert alert-danger py-1">
              <ul>
              {% for error in name_errors %}
                <li>{{ error }}</li>
              {% endfor %}
              </ul>
            </div>
          {% endif %}
          
          <button class="btn btn-primary">Save</button>
        </form>
      </div>

      <!-- Password -->
      <div class="tab-pane fade" id="password" role="tabpanel">
        <form method="POST">
          {% csrf_token %}
          <input type="hidden" name="operation" value="update_password">
          <div class="form-row">
            <div class="form-group col-md-6">
              <label>Old Password</label>
              <input name="old_password" type="password" class="form-control" required>
            </div>
            <div class="form-group col-md-6">
              <label>New Password</label>
              <input name="new_password" type="password" class="form-control" required>
            </div>
          </div>
          
          <div class="form-group">
            <span class="text-muted">{{ help_text }}</span>
          </div>
          
          {% if password_errors %}
            <div class="alert alert-danger">
              <ul>
              {% for error in password_errors %}
                <li>{{ error }}</li>
              {% endfor %}
              </ul>
            </div>
          {% endif %}
          
          <button class="btn btn-primary">Update</button>
        </form>
      </div>

      <!-- Optional -->
      <div class="tab-pane fade" id="optional" role="tabpanel">
        <form method="POST">
          {% csrf_token %}
          <input type="hidden" name="operation" value="update_optional">
          <div class="form-group">
            <label>Default address</label>
            <div class="form-row">
              <div class="form-group col-md-6">
                <label>X</label>
                <input name="default_x" type="number" class="form-control"
                      value="{% if user.profile.default_x != -1 %}{{ user.profile.default_x }}{% endif %}">
              </div>
              <div class="form-group col-md-6">
                <label>Y</label>
                <input name="default_y" type="number" class="form-control"
                      value="{% if user.profile.default_y != -1 %}{{ user.profile.default_y }}{% endif %}">
              </div>
            </div>
          </div>
          
          <div class="form-group">
            <label>UPS Account</label>
            <input name="ups_name" class="form-control" value="{{ user.profile.ups_name }}">
          </div>
          
          <button class="btn btn-primary">Save</button>
        </form>
      </div>
      
      <!-- Seller -->
      <div class="tab-pane fade" id="seller" role="tabpanel">
        <form method="POST">
          {% csrf_token %}
          <input type="hidden" name="operation" value="update_seller">
          
          <div class="form-group">
            <div class="custom-control custom-switch">
              <input type="checkbox" class="custom-control-input" id="register_seller" 
                     name="register_seller" value="seller" 
                     {% if user.profile.is_seller %}checked{% endif %}>
              <label class="custom-control-label" for="register_seller">Register as a seller</label>
            </div>
          </div>
          
          <button class="btn btn-primary">Update</button>
        </form>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block script %}
    <script type="text/javascript">
        function check_username() {
            return false;
        }

        function check_password() {
            return false;
        }
    </script>
{% endblock script %}

--- File: ./users/templates/users/register.html ---
{% extends "amazon/base.html" %}
{% load widget_tweaks %}
{% block content %}
<div class="auth-bg">
  <div class="auth-card">
    <h3 class="text-center auth-title">Create your account</h3>
    <form method="POST" novalidate>
      {% csrf_token %}
      <div class="form-group">
        <label><i class="fa fa-user mr-1"></i>Username</label>
        {{ form.username|add_class:"form-control" }}
      </div>
      <div class="form-group">
        <label><i class="fa fa-envelope mr-1"></i>Email</label>
        {{ form.email|add_class:"form-control" }}
      </div>
      <div class="form-row">
        <div class="form-group col-md-6">
          <label><i class="fa fa-lock mr-1"></i>Password</label>
          {{ form.password1|add_class:"form-control" }}
        </div>
        <div class="form-group col-md-6">
          <label><i class="fa fa-check mr-1"></i>Confirm</label>
          {{ form.password2|add_class:"form-control" }}
        </div>
      </div>
      <button class="btn btn-primary btn-block mt-2" type="submit">
        <i class="fa fa-user-plus mr-1"></i>Sign Up
      </button>
      <p class="text-center mt-3 mb-0">Already have an account?
        <a href="{% url 'login' %}">Log in</a></p>
    </form>
  </div>
</div>
{% endblock %}

--- File: ./users/templates/users/login.html ---
{% extends "amazon/base.html" %}
{% load widget_tweaks %}
{% block content %}
<div class="auth-bg">
  <div class="auth-card">
    <h3 class="text-center auth-title">Welcome back</h3>
    <form method="POST" novalidate>
      {% csrf_token %}
      <div class="form-group">
        <label for="id_username"><i class="fa fa-user mr-1"></i>Username</label>
        {{ form.username|add_class:"form-control" }}
      </div>
      <div class="form-group">
        <label for="id_password"><i class="fa fa-lock mr-1"></i>Password</label>
        {{ form.password|add_class:"form-control" }}
      </div>

      {% if messages %}
        <ul class="mb-3">
          {% for message in messages %}
            <li class="{{ message.tags }}">{{ message }}</li>
          {% endfor %}
        </ul>
      {% endif %}

      <button class="btn btn-primary btn-block mt-2" type="submit">
        <i class="fa fa-sign-in mr-1"></i>Log In
      </button>
      <p class="text-center mt-3 mb-0">Need an account?
        <a href="{% url 'register' %}">Sign up now</a></p>
    </form>
  </div>
</div>
{% endblock %}

--- File: ./users/templates/users/logout.html ---
{% extends "amazon/base.html" %}
{% block content %}
    <h2>You have been logged out</h2>
    <div class="border-top pt-3">
        <small class="text-muted">
            <a href="{% url 'login' %}">Log In Again</a>
        </small>
    </div>
{% endblock content %}
--- File: ./users/urls.py ---
from django.urls import path

from . import views

urlpatterns = [
   # path('register/', views.register, name="register"),
]

--- File: ./users/views.py ---
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.password_validation import password_validators_help_text_html
from django.shortcuts import render, redirect
from django.urls import reverse

from .forms import UserRegisterForm
from .utils import *


def register(request):
    if request.method == 'POST':
        form = UserRegisterForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect('login')
    else:
        form = UserRegisterForm()
    return render(request, 'users/register.html', {'form': form})


@login_required
def profile(request):
    context = {}
    user = request.user
    context["username"] = user.username
    context["email"] = user.email
    if request.method == 'POST':
        opera = request.POST["operation"]
        if opera == "update_profile":
            username = request.POST["username"]
            email = request.POST["email"]
            context["username"] = username
            context["email"] = email
            errors = check_username(username, user)
            if len(errors) == 0:
                user.username = username
                user.email = email
                user.save()
            else:
                context["name_errors"] = errors
        elif opera == "update_password":
            old_p = request.POST["old_password"]
            new_p = request.POST["new_password"]
            errors = check_password(old_p=old_p, new_p=new_p, user=user)
            if len(errors) == 0:
                user.set_password(new_p)
                user.save()
                messages.success(request, "successfully change the password")
                return redirect(reverse("login"))
            else:
                context["password_errors"] = errors
        elif opera == "update_seller":
            c = request.POST.getlist("register_seller")
            if len(c) == 0:
                user.profile.is_seller = False
            else:
                user.profile.is_seller = True
            user.profile.save()
        elif opera == "update_optional":
            ups_name = request.POST["ups_name"]
            default_x = request.POST["default_x"]
            default_y = request.POST["default_y"]
            if len(default_x) > 0:
                default_x = int(default_x)
                user.profile.default_x = default_x
            else:
                user.profile.default_x = -1
            if len(default_y) > 0:
                default_y = int(default_y)
                user.profile.default_y = default_y
            else:
                user.profile.default_y = -1
            user.profile.ups_name = ups_name
            user.save()

    context["help_text"] = password_validators_help_text_html
    return render(request, 'users/profile.html', context)




--- File: ./manage.py ---
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()
./ERSSHW5/

--- File: ./ERSSHW5/asgi.py ---
"""
ASGI config for ERSSHW5 project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')

application = get_asgi_application()
./ERSSHW5/__pycache__/

--- File: ./ERSSHW5/settings.py ---
"""
Django settings for ERSSHW5 project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '%f5o45o!1jroha1d&oc!d9cbhu3*v&27!3eb@jh_e)!+^!6k3l'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["web", "0.0.0.0", "127.0.0.1", 'vcm-12385.vm.duke.edu', 'localhost', 'vcm-13663.vm.duke.edu']


# Application definition

INSTALLED_APPS = [
    'amazon.apps.AmazonConfig',
    'users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'widget_tweaks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ERSSHW5.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ERSSHW5.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
          'ENGINE': 'django.db.backends.postgresql',
          'NAME': 'amazon',
          'PASSWORD': 'postgres',
          'USER': 'postgres',
          'HOST': 'db',
          'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = 'login'


--- File: ./ERSSHW5/urls.py ---
"""ERSSHW5 URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.0/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.contrib.auth import views as auth_views
from django.urls import path, include

from users import views as user_views

urlpatterns = [
    path('admin/', admin.site.urls),
    # redirect all user related pages to user app(which should handle the authentication)
    path('users/', include('users.urls')),
    path('register/', user_views.register, name='register'),
    path('profile/', user_views.profile, name='profile'),
    path('login/', auth_views.LoginView.as_view(template_name='users/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(template_name='users/logout.html'), name='logout'),
    # redirect all pages to amazon
    path('', include('amazon.urls'))
]

--- File: ./ERSSHW5/wsgi.py ---
"""
WSGI config for ERSSHW5 project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ERSSHW5.settings')

application = get_wsgi_application()
